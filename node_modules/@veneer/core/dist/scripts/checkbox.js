'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _checkbox_states = require('./utils/checkbox_states');

var _checkbox_states2 = _interopRequireDefault(_checkbox_states);

require('../css/checkboxes.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CHECKED_STATES_TO_BOOL = {
  unchecked: false,
  false: false,
  indeterminated: true,
  checked: true,
  true: true
};

var Checkbox = function (_React$Component) {
  _inherits(Checkbox, _React$Component);

  function Checkbox(props) {
    _classCallCheck(this, Checkbox);

    var _this = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

    _this.state = {
      checked: props.checked,
      hover: false
    };
    _this.handleOnChange = _this.handleOnChange.bind(_this);
    _this.handleOnKeyDown = _this.handleOnKeyDown.bind(_this);
    _this.onMouseOver = _this.onMouseOver.bind(_this);
    _this.onMouseOut = _this.onMouseOut.bind(_this);
    return _this;
  }

  _createClass(Checkbox, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        checked: nextProps.checked
      });
    }
  }, {
    key: 'onMouseOver',
    value: function onMouseOver() {
      this.setState({ hover: true });
    }
  }, {
    key: 'onMouseOut',
    value: function onMouseOut() {
      this.setState({ hover: false });
    }
  }, {
    key: 'handleOnChange',
    value: function handleOnChange(event) {
      if (this.props.disabled) return;

      this.setState({
        checked: !this.state.checked
      });

      if (this.props.onChange) {
        this.props.onChange(event);
      }
    }
  }, {
    key: 'handleOnKeyDown',
    value: function handleOnKeyDown(event) {
      if (this.props.disabled) return;
      switch (event.keyCode) {
        case 32:
          // SPACE
          this.setState({
            checked: !this.state.checked
          });

          if (this.props.onChange) {
            this.props.onChange(event);
          }
          break;
        default:
          break;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          id = _props.id,
          label = _props.label,
          name = _props.name,
          color = _props.color,
          other = _objectWithoutProperties(_props, ['className', 'disabled', 'id', 'label', 'name', 'color']);

      var labelClasses = {
        'vn-checkbox__label': true,
        'vn-checkbox__label--disabled': disabled
      };

      if (className) {
        labelClasses[className] = true;
      }

      var checkedState = this.state.checked;
      var checkIcon = void 0;
      if (_checkbox_states2.default[checkedState] === _checkbox_states2.default.checked) {
        checkIcon = 'check';
      } else if (_checkbox_states2.default[checkedState] === _checkbox_states2.default.indeterminated) {
        checkIcon = 'polygon';
      }

      var spanClasses = {
        'vn-checkbox__span': true,
        'vn-checkbox__span--checked': CHECKED_STATES_TO_BOOL[this.state.checked],
        'vn-checkbox__span--disabled': disabled
      };
      var checkboxTemplate = void 0;
      if (this.props.icon === undefined) {
        checkboxTemplate = _react2.default.createElement(
          'span',
          { className: (0, _classnames2.default)(spanClasses) },
          _react2.default.createElement(_icon2.default, {
            name: 'check',
            size: 12,
            display: checkIcon === 'check' ? 'block' : 'none',
            color: disabled ? 'gray' : 'white'
          }),
          _react2.default.createElement(_icon2.default, {
            name: 'polygon',
            size: 12,
            display: checkIcon === 'polygon' ? 'block' : 'none',
            color: disabled ? 'gray' : 'white'
          })
        );
      } else {
        var customIconColor = color;
        if (!this.state.checked && !this.state.hover) {
          customIconColor = 'black';
        } else if (this.state.checked && this.state.hover) {
          customIconColor = color + '-dark';
        }

        checkboxTemplate = _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_icon2.default, {
            className: 'vn-checkbox__icon',
            name: this.props.icon + '-checked',
            size: 24,
            display: this.state.checked ? 'block' : 'none',
            onKeyDown: this.handleOnKeyDown,
            color: disabled ? 'gray-light' : customIconColor
          }),
          _react2.default.createElement(_icon2.default, {
            className: 'vn-checkbox__icon',
            name: this.props.icon + '-unchecked',
            size: 24,
            display: !this.state.checked ? 'block' : 'none',
            onKeyDown: this.handleOnKeyDown,
            color: disabled ? 'gray-light' : customIconColor
          })
        );
      }

      return _react2.default.createElement(
        'label',
        {
          className: (0, _classnames2.default)(labelClasses),
          htmlFor: id,
          onMouseOver: this.onMouseOver,
          onMouseOut: this.onMouseOut
        },
        _react2.default.createElement('input', _extends({}, other, {
          checked: this.state.checked,
          className: 'vn-checkbox',
          id: id,
          onChange: this.handleOnChange,
          name: name,
          type: 'checkbox',
          disabled: disabled
        })),
        checkboxTemplate,
        label ? _react2.default.createElement(
          'span',
          { className: 'vn-checkbox__span-text' },
          label
        ) : ''
      );
    }
  }]);

  return Checkbox;
}(_react2.default.Component);

Checkbox.defaultProps = {
  className: undefined,
  checked: false,
  disabled: false,
  id: undefined,
  label: '',
  icon: undefined,
  onChange: function onChange() {},
  color: 'blue'
};

Checkbox.propTypes = {
  className: _propTypes2.default.string,
  checked: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  disabled: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  label: _propTypes2.default.node,
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  icon: _propTypes2.default.string,
  color: _propTypes2.default.string
};

Checkbox.displayName = 'Checkbox';

exports.default = Checkbox;