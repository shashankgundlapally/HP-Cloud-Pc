'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _dropdown_options = require('./dropdown_options');

var _dropdown_options2 = _interopRequireDefault(_dropdown_options);

var _debounce = require('./utils/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

require('../css/search.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Search = function (_React$Component) {
  _inherits(Search, _React$Component);

  function Search(props) {
    _classCallCheck(this, Search);

    var _this = _possibleConstructorReturn(this, (Search.__proto__ || Object.getPrototypeOf(Search)).call(this, props));

    _this.componentWillMount = function () {
      _this.delayedCallback = (0, _debounce2.default)(function (event) {
        if (_this.props.onChange) {
          _this.props.onChange(event.target.value);
        }
      }, _this.props.delay);
    };

    _this.componentWillReceiveProps = function (nextProps) {
      var value = nextProps.value;

      _this.setState({ value: value });
    };

    _this.setSuggestion = function (value) {
      _this.setState({
        suggestionsFiltered: [],
        value: value
      });
      _this.props.onChange(value);
    };

    _this.handleOptionMouseDown = function (option, index) {
      var suggestions = _this.state.suggestionsFiltered;
      _this.setSuggestion(suggestions[index].value);
    };

    _this.handleOnKeyDown = function (event) {
      if (!_this.state.suggestionsFiltered.length) {
        return;
      }

      var selectedIndex = _this.state.selectedIndex;
      var suggestionsFiltered = _this.state.suggestionsFiltered;

      switch (event.keyCode) {
        case 38:
          // UP
          if (selectedIndex > 0) {
            selectedIndex -= 1;
          }

          _this.setState({ selectedIndex: selectedIndex });
          event.preventDefault();
          break;

        case 40:
          // DOWN
          if (selectedIndex < suggestionsFiltered.length - 1) {
            selectedIndex += 1;
          }

          _this.setState({ selectedIndex: selectedIndex });
          event.preventDefault();
          break;

        case 27:
          // ESC
          _this.closeSuggestion();
          event.preventDefault();
          break;

        case 13:
          // ENTER
          _this.setState({ selectedIndex: 0 });
          _this.setSuggestion(_this.state.suggestionsFiltered[selectedIndex].value);
          event.preventDefault();
          break;

        default:
          break;
      }
    };

    _this.handleChange = function (event) {
      var text = event.target.value;
      var suggestions = _this.props.suggestions;
      event.persist();
      _this.setState({
        suggestionsFiltered: suggestions ? _this.filterSuggestions(suggestions, text) : [],
        value: text
      });
      _this.delayedCallback(event);
    };

    _this.closeSuggestion = function () {
      _this.setState({
        selectedIndex: 0,
        suggestionsFiltered: []
      });
    };

    _this.handleBlur = function (event) {
      event.preventDefault();
      _this.closeSuggestion();
    };

    _this.filterSuggestions = function (suggestions, value) {
      var filteredSuggestions = [];

      if (value.length) {
        filteredSuggestions = suggestions.filter(function (suggestion) {
          return suggestion.toLowerCase().indexOf(value.toLowerCase()) >= 0;
        });
        return filteredSuggestions.map(function (suggestion) {
          return { value: suggestion };
        });
      }
      return filteredSuggestions;
    };

    _this.state = {
      selectedIndex: 0,
      suggestionsFiltered: [],
      value: _this.props.value
    };
    return _this;
  }

  _createClass(Search, [{
    key: 'render',
    value: function render() {
      // eslint-disable-next-line no-unused-vars
      var _props = this.props,
          className = _props.className,
          suggestions = _props.suggestions,
          delay = _props.delay,
          other = _objectWithoutProperties(_props, ['className', 'suggestions', 'delay']);

      var classes = {
        'vn-search__input': !this.state.suggestionsFiltered.length,
        'vn-search__input--open': this.state.suggestionsFiltered.length
      };

      if (className) {
        classes[className] = true;
      }

      return _react2.default.createElement(
        'div',
        { className: 'vn-search', onBlur: this.handleBlur },
        _react2.default.createElement('input', _extends({}, other, {
          autoComplete: 'off',
          className: (0, _classnames2.default)(classes),
          onChange: this.handleChange,
          onKeyDown: this.handleOnKeyDown,
          value: this.state.value,
          type: 'search'
        })),
        _react2.default.createElement(_icon2.default, { name: 'search', className: 'vn-search__icon', size: 24, color: 'gray-darker' }),
        this.state.suggestionsFiltered.length > 0 && _react2.default.createElement(_dropdown_options2.default, {
          options: this.state.suggestionsFiltered,
          onMouseDown: this.handleOptionMouseDown,
          selectedIndex: this.state.selectedIndex
        })
      );
    }
  }]);

  return Search;
}(_react2.default.Component);

Search.propTypes = {
  className: _propTypes2.default.string,
  delay: _propTypes2.default.number,
  onChange: _propTypes2.default.func.isRequired,
  suggestions: _propTypes2.default.arrayOf(_propTypes2.default.string),
  value: _propTypes2.default.string
};

Search.defaultProps = {
  className: null,
  delay: 0,
  suggestions: [],
  value: undefined
};

Search.displayName = 'Search';

exports.default = Search;