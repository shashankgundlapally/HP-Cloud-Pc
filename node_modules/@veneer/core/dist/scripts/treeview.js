'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _checkbox_group = require('./checkbox_group');

var _checkbox_group2 = _interopRequireDefault(_checkbox_group);

var _checkbox_states = require('./utils/checkbox_states');

var _checkbox_states2 = _interopRequireDefault(_checkbox_states);

require('../css/treeview.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var itemsPropType = _propTypes2.default.arrayOf(_propTypes2.default.shape({
  checked: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  id: _propTypes2.default.number.isRequired,
  name: _propTypes2.default.string.isRequired,
  totalItems: _propTypes2.default.number,
  value: _propTypes2.default.node.isRequired,
  isExpanded: _propTypes2.default.bool
}));

var TreeView = function (_React$Component) {
  _inherits(TreeView, _React$Component);

  _createClass(TreeView, null, [{
    key: 'changeCheckedState',
    value: function changeCheckedState(currentCheck, newCheck) {
      if (currentCheck === undefined) {
        if (newCheck !== undefined) {
          return newCheck;
        }
        return _checkbox_states2.default.unchecked;
      }
      if (currentCheck === newCheck) {
        return currentCheck;
      }
      return _checkbox_states2.default.indeterminated;
    }
  }]);

  function TreeView(props) {
    _classCallCheck(this, TreeView);

    var _this = _possibleConstructorReturn(this, (TreeView.__proto__ || Object.getPrototypeOf(TreeView)).call(this, props));

    _this.handleChange = function (items) {
      var newItems = items.map(function (item) {
        return _this.recursive(item);
      });
      _this.setState({ items: newItems });
      _this.props.onChange(newItems);
    };

    _this.state = {
      items: props.items.map(function (item) {
        return _this.recursive(item);
      })
    };
    return _this;
  }

  _createClass(TreeView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.state.items !== nextProps.items) {
        var newItems = nextProps.items.map(function (item) {
          return _this2.recursive(item);
        });
        this.setState({ items: newItems });
      }
    }
  }, {
    key: 'recursive',
    value: function recursive(item) {
      var _this3 = this;

      var newItem = item;
      if (newItem.items == null) {
        if (newItem.checked === undefined) {
          newItem.checked = _checkbox_states2.default.unchecked;
        } else {
          newItem.checked = _checkbox_states2.default[newItem.checked];
        }
        return newItem;
      }

      var checked = void 0;
      newItem.items = item.items.map(function (child) {
        var newChild = child;

        if (_checkbox_states2.default[newItem.checked] === _checkbox_states2.default.checked) {
          newChild.checked = _checkbox_states2.default.checked;
        } else if (_checkbox_states2.default[newItem.checked] === _checkbox_states2.default.unchecked) {
          newChild.checked = _checkbox_states2.default.unchecked;
        }

        newChild = _this3.recursive(newChild);
        checked = TreeView.changeCheckedState(checked, newChild.checked);
        return newChild;
      });
      newItem.checked = checked;
      return newItem;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          maxHeight = _props.maxHeight,
          onChange = _props.onChange,
          title = _props.title,
          hideEmpty = _props.hideEmpty,
          items = _props.items,
          otherProps = _objectWithoutProperties(_props, ['maxHeight', 'onChange', 'title', 'hideEmpty', 'items']);

      return _react2.default.createElement(
        'div',
        _extends({ className: 'vn-treeview' }, otherProps),
        title != null && _react2.default.createElement(
          'div',
          { className: 'vn-treeview__header' },
          _react2.default.createElement(
            'div',
            { className: 'vn-treeview__inner-header' },
            _react2.default.createElement(
              'span',
              { className: 'vn-treeview__title' },
              title
            )
          )
        ),
        _react2.default.createElement(_checkbox_group2.default, {
          items: this.state.items,
          maxHeight: maxHeight,
          onChange: this.handleChange,
          title: title,
          hideEmpty: hideEmpty
        })
      );
    }
  }]);

  return TreeView;
}(_react2.default.Component);

TreeView.propTypes = {
  hideEmpty: _propTypes2.default.bool,
  items: itemsPropType.isRequired,
  maxHeight: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired,
  title: _propTypes2.default.string
};

TreeView.defaultProps = {
  hideEmpty: false,
  maxHeight: '',
  title: ''
};

TreeView.displayName = 'TreeView';

exports.default = TreeView;