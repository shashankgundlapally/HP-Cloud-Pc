'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfirmationModal = exports.AlertModal = exports.Modal = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

require('../css/modal.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global document window */


var Modal = function (_React$Component) {
  _inherits(Modal, _React$Component);

  _createClass(Modal, null, [{
    key: 'dialogClick',
    value: function dialogClick(event) {
      /* We stop propagation in order to allow the user to click inside modal without closing it */
      event.stopPropagation();
    }
  }, {
    key: 'hasScroll',
    value: function hasScroll() {
      return document.body.scrollHeight > window.innerHeight;
    }
  }, {
    key: 'measureScrollbar',
    value: function measureScrollbar() {
      var scrollDiv = document.createElement('div');
      scrollDiv.className = 'vn-modal-scrollbar-measure';
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    }
  }, {
    key: 'toFlexAlignment',
    value: function toFlexAlignment(align) {
      switch (align) {
        case 'left':
          return 'flex-start';
        case 'right':
          return 'flex-end';
        default:
          return align;
      }
    }
  }]);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this.state = {
      show: props.show
    };

    _this.ESCAPE_CODE = 27;
    _this.HTML_BODY_CLASS = 'vn-modal-html-body';

    _this.closeModal = _this.closeModal.bind(_this);
    return _this;
  }

  _createClass(Modal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      document.addEventListener('keydown', function (e) {
        if (_this2.props.show && e.keyCode === _this2.ESCAPE_CODE) {
          _this2.closeModal();
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.show !== this.state.show) {
        this.setState({
          show: nextProps.show
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.updateBody();
    }
  }, {
    key: 'updateBody',
    value: function updateBody() {
      /* We need to hide the scroll from html body and
         also give it a padding-right to compensate the space of the scroll
      */
      if (Modal.hasScroll()) {
        if (this.state.show) {
          document.body.classList.add(this.HTML_BODY_CLASS);
          document.body.style['padding-right'] = Modal.measureScrollbar() + 'px';
        } else {
          document.body.classList.remove(this.HTML_BODY_CLASS);
          document.body.style['padding-right'] = null;
        }
      }
    }
  }, {
    key: 'closeModal',
    value: function closeModal() {
      this.setState({
        show: false
      });
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.state.show) {
        return _react2.default.createElement('div', null);
      }

      var _props = this.props,
          align = _props.align,
          children = _props.children,
          dismissOnOverlayClick = _props.dismissOnOverlayClick,
          footer = _props.footer,
          size = _props.size,
          title = _props.title,
          show = _props.show,
          onClose = _props.onClose,
          remainingProps = _objectWithoutProperties(_props, ['align', 'children', 'dismissOnOverlayClick', 'footer', 'size', 'title', 'show', 'onClose']);

      var alignStyle = {
        alignSelf: Modal.toFlexAlignment(align),
        textAlign: align
      };

      var overlayClick = dismissOnOverlayClick ? this.closeModal : null;

      return (
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react2.default.createElement(
          'div',
          _extends({}, remainingProps, { className: 'vn-modal', onClick: overlayClick }),
          _react2.default.createElement(
            'div',
            { className: 'vn-modal__dialog vn-modal__dialog--' + size, onClick: Modal.dialogClick },
            _react2.default.createElement(
              'div',
              { className: 'vn-modal__content' },
              title ? _react2.default.createElement(
                'div',
                { className: 'vn-modal__header', style: alignStyle },
                _react2.default.createElement(
                  'h4',
                  null,
                  title
                )
              ) : '',
              _react2.default.createElement(
                'a',
                {
                  className: 'vn-modal__close',
                  onClick: this.closeModal,
                  role: 'button',
                  tabIndex: 0
                },
                _react2.default.createElement(_icon2.default, {
                  name: 'delete',
                  color: 'gray',
                  size: 16,
                  className: 'vn-modal__close-icon'
                })
              ),
              _react2.default.createElement(
                'div',
                { className: 'vn-modal__body', style: alignStyle },
                children
              ),
              footer ? _react2.default.createElement(
                'div',
                { className: 'vn-modal__footer', style: alignStyle },
                footer
              ) : ''
            )
          )
        )
      );
    }
  }]);

  return Modal;
}(_react2.default.Component);

Modal.propTypes = {
  align: _propTypes2.default.oneOf(['left', 'right', 'center']),
  children: _propTypes2.default.node,
  dismissOnOverlayClick: _propTypes2.default.bool,
  footer: _propTypes2.default.element,
  onClose: _propTypes2.default.func,
  show: _propTypes2.default.bool,
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg', 'xl']),
  title: _propTypes2.default.string
};

Modal.defaultProps = {
  align: 'left',
  children: null,
  dismissOnOverlayClick: true,
  footer: null,
  onClose: function onClose() {},
  show: false,
  size: 'md',
  title: null
};

/*----------------------------------------------------------------------------------------------*/

var AlertModal = function AlertModal(props) {
  return _react2.default.createElement(Modal, _extends({}, props, { align: 'center' }));
};

AlertModal.defaultProps = {
  size: 'sm'
};

/*----------------------------------------------------------------------------------------------*/

var ConfirmationModal = function (_React$Component2) {
  _inherits(ConfirmationModal, _React$Component2);

  // eslint-disable-line react/no-multi-comp
  function ConfirmationModal(props) {
    _classCallCheck(this, ConfirmationModal);

    var _this3 = _possibleConstructorReturn(this, (ConfirmationModal.__proto__ || Object.getPrototypeOf(ConfirmationModal)).call(this, props));

    _this3.state = {
      show: props.show
    };
    _this3.closeModal = _this3.closeModal.bind(_this3);
    return _this3;
  }

  _createClass(ConfirmationModal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.show !== this.state.show) {
        this.setState({
          show: nextProps.show
        });
      }
    }
  }, {
    key: 'closeModal',
    value: function closeModal() {
      this.setState({ show: false });
      if (this.props.onClose) {
        this.props.onClose();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          closeButtonLabel = _props2.closeButtonLabel,
          confirmButtonLabel = _props2.confirmButtonLabel,
          onConfirm = _props2.onConfirm,
          size = _props2.size,
          title = _props2.title,
          others = _objectWithoutProperties(_props2, ['children', 'closeButtonLabel', 'confirmButtonLabel', 'onConfirm', 'size', 'title']);

      var show = this.state.show;

      var footer = _react2.default.createElement(
        'div',
        { className: 'vn-button-group--responsive' },
        _react2.default.createElement(
          _button2.default,
          { onClick: onConfirm },
          confirmButtonLabel
        ),
        _react2.default.createElement(
          _button2.default,
          { onClick: this.closeModal, appearance: 'secondary' },
          closeButtonLabel
        )
      );

      return _react2.default.createElement(
        Modal,
        _extends({}, others, {
          align: 'center',
          footer: footer,
          onClose: this.closeModal,
          onConfirm: onConfirm,
          show: show,
          size: size,
          title: title
        }),
        children
      );
    }
  }]);

  return ConfirmationModal;
}(_react2.default.Component);

ConfirmationModal.propTypes = {
  children: _propTypes2.default.node,
  closeButtonLabel: _propTypes2.default.string,
  confirmButtonLabel: _propTypes2.default.string,
  onClose: _propTypes2.default.func,
  onConfirm: _propTypes2.default.func,
  show: _propTypes2.default.bool,
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg', 'xl']),
  title: _propTypes2.default.string
};

ConfirmationModal.defaultProps = {
  closeButtonLabel: 'Close',
  confirmButtonLabel: 'OK',
  show: false
};

Modal.displayName = 'Modal';
AlertModal.displayName = 'AlertModal';
ConfirmationModal.displayName = 'ConfirmationModal';

exports.Modal = Modal;
exports.AlertModal = AlertModal;
exports.ConfirmationModal = ConfirmationModal;