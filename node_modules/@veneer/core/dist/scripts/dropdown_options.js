'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _labeledicon = require('./labeledicon');

var _labeledicon2 = _interopRequireDefault(_labeledicon);

require('../css/dropdown_options.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var shortid = require('shortid');

var DropdownOptions = function (_React$Component) {
  _inherits(DropdownOptions, _React$Component);

  function DropdownOptions() {
    _classCallCheck(this, DropdownOptions);

    return _possibleConstructorReturn(this, (DropdownOptions.__proto__ || Object.getPrototypeOf(DropdownOptions)).apply(this, arguments));
  }

  _createClass(DropdownOptions, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var optionsClasses = {
        'vn-dropdown_options': true,
        'vn-dropdown_options--error': this.props.error,
        'vn-dropdown_options--upwards': this.props.optionsOrientation.includes('up'),
        'vn-dropdown_options--right': this.props.optionsOrientation.includes('right')
      };

      var calcOptionsHeight = function calcOptionsHeight() {
        var optionHeight = 35;
        var maxOptions = _this2.props.options.length;

        if (_this2.props.visibleOptions > maxOptions || _this2.props.visibleOptions <= 0) {
          return maxOptions * optionHeight;
        }
        return _this2.props.visibleOptions * optionHeight;
      };

      var optionsHeight = calcOptionsHeight();
      var dropdownClasses = void 0;
      var linkClasses = void 0;
      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(optionsClasses) },
        _react2.default.createElement(
          'ul',
          { className: 'vn-dropdown_options--scroll', style: { height: optionsHeight + 'px' } },
          this.props.options.map(function (option, index) {
            dropdownClasses = {
              'vn-dropdown_options__option--focused': _this2.props.selectedIndex === index && !option.disabled,
              'vn-dropdown_options__option': _this2.props.selectedIndex !== index && !option.disabled,
              'vn-dropdown_options__option--disabled': option.disabled
            };
            linkClasses = {
              'vn-dropdown_options__option-link--focused': _this2.props.selectedIndex === index && !option.disabled,
              'vn-dropdown_options__option-link': _this2.props.selectedIndex !== index && !option.disabled,
              'vn-dropdown_options__option-link--disabled': option.disabled
            };
            return _react2.default.createElement(
              'li',
              { key: shortid.generate(), className: (0, _classnames2.default)(dropdownClasses) },
              _react2.default.createElement(
                'a',
                {
                  className: (0, _classnames2.default)(linkClasses),
                  onClick: function onClick(e) {
                    return _this2.props.onClick(option, index, e);
                  },
                  onMouseDown: function onMouseDown(e) {
                    return _this2.props.onMouseDown(option, index, e);
                  },
                  role: 'option',
                  tabIndex: 0,
                  'aria-selected': _this2.props.selectedIndex === index
                },
                option.icon === undefined && (option.label || option.value),
                option.icon !== undefined && _react2.default.createElement(_labeledicon2.default, { name: option.icon, label: option.label || option.value })
              )
            );
          })
        )
      );
    }
  }]);

  return DropdownOptions;
}(_react2.default.Component);

DropdownOptions.propTypes = {
  error: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  onMouseDown: _propTypes2.default.func,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.string,
    label: _propTypes2.default.string,
    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
  })).isRequired,
  optionsOrientation: _propTypes2.default.arrayOf(_propTypes2.default.string),
  selectedIndex: _propTypes2.default.number.isRequired,
  visibleOptions: _propTypes2.default.number
};

DropdownOptions.defaultProps = {
  error: false,
  onClick: function onClick() {},
  onMouseDown: function onMouseDown() {},
  optionsOrientation: [],
  selectedIndex: 0,
  visibleOptions: 10
};

exports.default = DropdownOptions;