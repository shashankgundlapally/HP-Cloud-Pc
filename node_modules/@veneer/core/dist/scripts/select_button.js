'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectButtonAction = exports.SelectButton = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _menu = require('./menu');

var _popover = require('./popover');

var _popover2 = _interopRequireDefault(_popover);

require('../css/select_button.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var shortid = require('shortid');

var SelectButtonAction = function SelectButtonAction(props) {
  return _react2.default.createElement(_menu.MenuItem, props);
};

SelectButtonAction.propTypes = {
  disabled: _propTypes2.default.bool,
  icon: _propTypes2.default.string,
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
  onClick: _propTypes2.default.func.isRequired,
  selected: _propTypes2.default.bool
};

SelectButtonAction.defaultProps = {
  disabled: false,
  icon: null,
  selected: false
};

SelectButtonAction.displayName = 'SelectButtonAction';

var SelectButton = function (_Component) {
  _inherits(SelectButton, _Component);

  function SelectButton(props) {
    _classCallCheck(this, SelectButton);

    var _this = _possibleConstructorReturn(this, (SelectButton.__proto__ || Object.getPrototypeOf(SelectButton)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = SelectButton.updateState(props);
    return _this;
  }

  _createClass(SelectButton, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState(SelectButton.updateState(nextProps));
    }
  }, {
    key: 'render',
    value: function render() {
      // -- see https://github.com/eslint/eslint/issues/4880
      // -- this is to avoid selectedIndex ending up in the root div
      // eslint-disable-next-line no-unused-vars
      var _props = this.props,
          appearance = _props.appearance,
          className = _props.className,
          expanded = _props.expanded,
          loading = _props.loading,
          selectedIndex = _props.selectedIndex,
          otherProps = _objectWithoutProperties(_props, ['appearance', 'className', 'expanded', 'loading', 'selectedIndex']);

      var _state = this.state,
          disabled = _state.disabled,
          iconColor = _state.iconColor,
          label = _state.label,
          onClick = _state.onClick;


      var buttonProps = {
        appearance: appearance,
        className: 'vn-select-button__button',
        disabled: disabled,
        loading: loading,
        onClick: onClick
      };
      var button = _react2.default.createElement(
        _button2.default,
        buttonProps,
        label
      );

      var arrowButtonProps = {
        appearance: appearance,
        className: 'vn-select-button__arrow',
        disabled: disabled
      };
      var arrowButton = _react2.default.createElement(
        _button2.default,
        arrowButtonProps,
        _react2.default.createElement(_icon2.default, { className: 'vn-select-button__arrow-icon', name: 'arrow', color: iconColor, size: 12 })
      );

      var classes = (0, _classnames3.default)(_defineProperty({
        'vn-select-button': true,
        'vn-select-button--expanded': expanded === true
      }, className, className !== undefined));
      return _react2.default.createElement(
        'div',
        _extends({}, otherProps, { className: classes }),
        button,
        this.wrapPopover(arrowButton)
      );
    }
  }]);

  return SelectButton;
}(_react.Component);

SelectButton.iconColor = function (appearance, disabled) {
  if (disabled) {
    return 'gray';
  }
  if (appearance === 'secondary') {
    return 'black';
  }
  return 'white';
};

SelectButton.updateState = function (props) {
  var selectedIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.selectedIndex;
  var children = props.children;

  var action = _react2.default.Children.toArray(children)[selectedIndex];
  if (!action) {
    console.warn('No action found at selected index ' + selectedIndex);
    return {};
  }
  var disabled = props.disabled || props.loading || action.props.disabled;
  var _action$props = action.props,
      label = _action$props.label,
      onClick = _action$props.onClick;

  return {
    disabled: disabled,
    iconColor: SelectButton.iconColor(props.appearance, disabled),
    label: label,
    onClick: onClick,
    selectedIndex: selectedIndex
  };
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.actionOnClick = function (selectedIndex, onClick) {
    return function (event) {
      _this2.setState(SelectButton.updateState(_this2.props, selectedIndex));
      onClick(event);
    };
  };

  this.wrapPopover = function (arrowButton) {
    var _state2 = _this2.state,
        disabled = _state2.disabled,
        selectedIndex = _state2.selectedIndex;

    if (disabled) {
      return arrowButton;
    }
    var actions = _react2.default.createElement(
      _menu.Menu,
      { className: 'vn-select-button__menu' },
      _react2.default.Children.toArray(_this2.props.children).map(function (item, index) {
        return _react2.default.createElement(SelectButtonAction, _extends({}, item.props, {
          key: shortid.generate(),
          onClick: _this2.actionOnClick(index, item.props.onClick),
          selected: index === selectedIndex
        }));
      })
    );
    return _react2.default.createElement(
      _popover2.default,
      { content: actions, alignment: 'right' },
      arrowButton
    );
  };
};

SelectButton.propTypes = {
  appearance: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  expanded: _propTypes2.default.bool,
  loading: _propTypes2.default.bool,
  selectedIndex: _propTypes2.default.number.isRequired
};

SelectButton.defaultProps = {
  appearance: null,
  className: null,
  disabled: false,
  expanded: false,
  loading: false
};

SelectButton.displayName = 'SelectButton';

exports.SelectButton = SelectButton;
exports.SelectButtonAction = SelectButtonAction;