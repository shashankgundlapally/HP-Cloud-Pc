'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('../css/textbox.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextBox = function (_React$Component) {
  _inherits(TextBox, _React$Component);

  function TextBox(props) {
    _classCallCheck(this, TextBox);

    var _this = _possibleConstructorReturn(this, (TextBox.__proto__ || Object.getPrototypeOf(TextBox)).call(this, props));

    _this.focus = function () {
      _this.inputField.focus();
    };

    _this.handleChange = function (event) {
      _this.setState({
        value: event.target.value
      }, function () {
        return _this.props.onChange(_this.state.value);
      });
    };

    _this.state = {
      value: props.value
    };
    return _this;
  }

  _createClass(TextBox, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        value: nextProps.value
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          name = _props.name,
          placeholder = _props.placeholder,
          type = _props.type,
          other = _objectWithoutProperties(_props, ['className', 'disabled', 'name', 'placeholder', 'type']);

      var error = other.error,
          rootProps = _objectWithoutProperties(other, ['error']);

      var classes = {
        'vn-textbox': true,
        'vn-textbox__single-line': true,
        'vn-textbox--error': error,
        'vn-textbox--expanded': true
      };

      if (className) {
        classes[className] = true;
      }
      return _react2.default.createElement('input', _extends({}, rootProps, {
        className: (0, _classnames2.default)(classes),
        disabled: disabled,
        id: name,
        name: name,
        type: type,
        onChange: this.handleChange,
        placeholder: placeholder,
        value: this.state.value,

        ref: function ref(c) {
          _this2.inputField = c;
        }
      }));
    }
  }]);

  return TextBox;
}(_react2.default.Component);

TextBox.propTypes = {
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  maxLength: _propTypes2.default.number,
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  placeholder: _propTypes2.default.string,
  type: _propTypes2.default.oneOf(['password', 'text']),
  value: _propTypes2.default.string
};

TextBox.defaultProps = {
  className: null,
  disabled: false,
  error: false,
  maxLength: undefined,
  onChange: function onChange() {},
  placeholder: '',
  type: 'text',
  value: ''
};

TextBox.displayName = 'TextBox';

exports.default = TextBox;