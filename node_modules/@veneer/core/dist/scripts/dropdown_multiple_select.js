'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _multiple_options = require('./multiple_options');

var _multiple_options2 = _interopRequireDefault(_multiple_options);

var _key_press_options_handler = require('./utils/key_press_options_handler');

var _key_press_options_handler2 = _interopRequireDefault(_key_press_options_handler);

require('../css/dropdown.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */


var DropdownMultipleSelect = function (_Component) {
  _inherits(DropdownMultipleSelect, _Component);

  function DropdownMultipleSelect(props) {
    _classCallCheck(this, DropdownMultipleSelect);

    var _this = _possibleConstructorReturn(this, (DropdownMultipleSelect.__proto__ || Object.getPrototypeOf(DropdownMultipleSelect)).call(this, props));

    _this.componentWillMount = function () {
      _this.updateTitle();
    };

    _this.componentDidMount = function () {
      window.addEventListener('click', _this.handleWindowClick);
    };

    _this.componentWillUnmount = function () {
      window.removeEventListener('click', _this.handleWindowClick);
    };

    _this.getTitle = function () {
      var title = _this.state.title;


      if (title.length === 0) {
        return _this.props.placeholder;
      }
      var contents = title.map(function (item) {
        return item.content;
      });
      return contents.join(', ');
    };

    _this.closeOptions = function () {
      _this.setState({
        isFocused: false,
        isOpen: false
      });
    };

    _this.handleBlur = function (event) {
      event.preventDefault();
      _this.setState({
        isFocused: false
      });
    };

    _this.handleChange = function (options) {
      var onChange = _this.props.onChange;


      _this.updateTitle();

      if (onChange) {
        onChange(options);
      }
    };

    _this.handleClearClick = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          options = _this$props.options;


      if (disabled) {
        return;
      }

      options.forEach(function (option, index) {
        if (option.checked && !option.disabled) {
          options[index].checked = false;
        }
      });

      _this.handleChange(options);
    };

    _this.handleClick = function (event) {
      event.preventDefault();
      var _this$props2 = _this.props,
          disabled = _this$props2.disabled,
          options = _this$props2.options;
      var isOpen = _this.state.isOpen;

      if (disabled) {
        return;
      }
      if (options.length === 0) {
        return;
      }
      _this.setState({
        isOpen: !isOpen
      });
    };

    _this.handleFocus = function (event) {
      event.preventDefault();
      if (_this.props.disabled) {
        return;
      }

      _this.setState({
        isFocused: true
      });
    };

    _this.handleKeyDown = function (event) {
      switch (event.keyCode) {
        case 38:
          // Up
          event.preventDefault();
          break;
        case 40:
          // Down
          event.preventDefault();
          if (_this.state.isOpen) {
            _this.highlightedOption.focus();
          } else {
            _this.setState({
              highlightedIndex: 0,
              isFocused: true,
              isOpen: true
            }, function () {
              return _this.highlightedOption.focus();
            });
          }
          break;
        case 13:
          // Enter
          event.stopPropagation();
          if (_this.state.isOpen) {
            _this.closeOptions();
          } else {
            _this.setState({
              highlightedIndex: 0,
              isFocused: true,
              isOpen: true
            }, function () {
              return _this.highlightedOption.focus();
            });
          }
          break;
        case 27:
          // Esc
          _this.closeOptions();
          break;
        default:
          break;
      }
    };

    _this.handleKeyDownClear = function (event) {
      switch (event.keyCode) {
        case 38:
          // Up
          event.preventDefault();
          break;
        case 40:
          // Down
          event.preventDefault();
          if (_this.state.isOpen) {
            _this.highlightedOption.focus();
          } else {
            _this.setState({
              highlightedIndex: 0,
              isFocused: true,
              isOpen: true
            }, function () {
              return _this.highlightedOption.focus();
            });
          }
          break;
        case 13:
          // Enter
          event.stopPropagation();
          _this.handleClearClick();
          break;
        case 27:
          // Esc
          _this.closeOptions();
          break;
        default:
          break;
      }
    };

    _this.handleKeyPress = function (event) {
      if (!Object.keys(_this.props.options)) {
        return;
      }
      if (_this.props.disabled) {
        return;
      }
      event.preventDefault();
      _this.keyPressOptionsHandler.handle(event.key);
    };

    _this.handleWindowClick = function (event) {
      if (_this.dropDown.contains(event.target)) return;
      _this.closeOptions();
    };

    _this.hasSelectedItems = function () {
      var selectedItems = [];
      _this.props.options.forEach(function (option) {
        if (option.checked && !option.disabled) {
          selectedItems.push(option.id);
        }
      });
      return selectedItems.length > 0;
    };

    _this.keyPressOptionsHandlerCallback = function (highlightedIndex) {
      if (highlightedIndex < 0) {
        return;
      }
      if (_this.state.isOpen) {
        _this.setState({ highlightedIndex: highlightedIndex }, function () {
          return _this.highlightedOption.focus();
        });
      } else {
        _this.setState({
          highlightedIndex: highlightedIndex,
          isFocused: true,
          isOpen: true
        }, function () {
          return _this.highlightedOption.focus();
        });
      }
    };

    _this.removeOptionFromTitle = function (option, title) {
      title.forEach(function (item, index) {
        if (item.id === option.id) {
          title.splice(index, 1);
        }
      });
      return title;
    };

    _this.titleHasOption = function (option, title) {
      var filteredTitle = title.filter(function (item) {
        return item.id === option.id;
      });
      if (filteredTitle.length === 0) {
        return false;
      }
      return true;
    };

    _this.updateTitle = function () {
      var title = _this.state.title;

      _this.props.options.forEach(function (option) {
        if (!option.checked) {
          title = _this.removeOptionFromTitle(option, title);
        } else if (!_this.titleHasOption(option, title)) {
          title.push({ id: option.id, content: option.label || option.value });
        }
      });
      _this.setState({
        title: title
      });
    };

    _this.keyPressOptionsHandler = new _key_press_options_handler2.default(props.options, _this.keyPressOptionsHandlerCallback, 100);

    _this.state = {
      isFocused: false,
      isOpen: false,
      title: []
    };
    return _this;
  }

  _createClass(DropdownMultipleSelect, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.keyPressOptionsHandler = new _key_press_options_handler2.default(nextProps.options, this.keyPressOptionsHandlerCallback, 100);
      this.updateTitle();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          disabled = _props.disabled,
          error = _props.error,
          options = _props.options,
          optionsOrientation = _props.optionsOrientation,
          visibleOptions = _props.visibleOptions;
      var _state = this.state,
          highlightedIndex = _state.highlightedIndex,
          isFocused = _state.isFocused,
          isOpen = _state.isOpen;

      var hasSelectedItems = this.hasSelectedItems();

      var titleClasses = {
        'vn-dropdown__title': true,
        'vn-dropdown__title--disabled': disabled,
        'vn-dropdown__title--error': error,
        'vn-dropdown__title--focused': isOpen || isFocused,
        'vn-dropdown__title--open': isOpen,
        'vn-dropdown__title--open_upwards': isOpen && optionsOrientation.includes('up')
      };

      var titleTextClasses = {
        'vn-dropdown__title-text': true,
        'vn-dropdown__title-text--disabled': disabled,
        'vn-dropdown__title-text--two-buttons': hasSelectedItems
      };

      return _react2.default.createElement(
        'div',
        { className: 'vn-dropdown', ref: function ref(node) {
            _this2.dropDown = node;
          } },
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(titleClasses) },
          _react2.default.createElement(
            'a',
            {
              className: (0, _classnames2.default)(titleTextClasses),
              role: 'listbox',
              tabIndex: 0,
              onBlur: this.handleBlur,
              onClick: this.handleClick,
              onFocus: this.handleFocus,
              onKeyDown: this.handleKeyDown,
              onKeyPress: this.handleKeyPress
            },
            this.getTitle()
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-dropdown__button-group' },
            hasSelectedItems && !disabled && _react2.default.createElement(
              'a',
              {
                className: 'vn-dropdown__button-clear',
                role: 'listbox',
                tabIndex: 0,
                onBlur: this.handleBlur,
                onClick: this.handleClearClick,
                onFocus: this.handleFocus,
                onKeyDown: this.handleKeyDownClear,
                onKeyPress: this.handleKeyPress
              },
              _react2.default.createElement(_icon2.default, { color: 'gray', name: 'delete', size: 12 })
            ),
            _react2.default.createElement(
              'a',
              {
                role: 'listbox',
                tabIndex: 0,
                className: 'vn-dropdown__button',
                onBlur: this.handleBlur,
                onClick: this.handleClick,
                onFocus: this.handleFocus,
                onKeyDown: this.handleKeyDown,
                onKeyPress: this.handleKeyPress
              },
              _react2.default.createElement(_icon2.default, { color: disabled ? 'gray' : 'black', name: 'arrow', size: 12 })
            )
          )
        ),
        isOpen && options.length > 0 && _react2.default.createElement(_multiple_options2.default, {
          error: error,
          highlightedIndex: highlightedIndex,
          highlightedRef: function highlightedRef(el) {
            _this2.highlightedOption = el;
          },
          onChange: this.handleChange,
          onKeyDown: this.handleKeyDown,
          onKeyPress: this.handleKeyPress,
          options: options,
          optionsOrientation: optionsOrientation,
          visibleOptions: visibleOptions
        })
      );
    }
  }]);

  return DropdownMultipleSelect;
}(_react.Component);

DropdownMultipleSelect.propTypes = {
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    checked: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    id: _propTypes2.default.number.isRequired,
    label: _propTypes2.default.string,
    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
  })).isRequired,
  optionsOrientation: _propTypes2.default.arrayOf(_propTypes2.default.string),
  placeholder: _propTypes2.default.string,
  visibleOptions: _propTypes2.default.number
};

DropdownMultipleSelect.defaultProps = {
  disabled: false,
  error: false,
  onChange: function onChange() {},
  optionsOrientation: [],
  placeholder: '',
  visibleOptions: 10
};

DropdownMultipleSelect.displayName = 'DropdownMultipleSelect';

exports.default = DropdownMultipleSelect;