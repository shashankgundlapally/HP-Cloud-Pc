'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuButtonAction = exports.MenuButton = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _menu = require('./menu');

var _popover = require('./popover');

var _popover2 = _interopRequireDefault(_popover);

var _colors = require('./utils/colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var MenuButtonAction = function MenuButtonAction(props) {
  return _react2.default.createElement(_menu.MenuItem, props);
};

MenuButtonAction.propTypes = {
  disabled: _propTypes2.default.bool,
  href: _propTypes2.default.string,
  icon: _propTypes2.default.string,
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
  onClick: _propTypes2.default.func
};

MenuButtonAction.defaultProps = {
  disabled: false,
  href: null,
  icon: null,
  onClick: function onClick() {}
};

MenuButtonAction.displayName = 'MenuButtonAction';

var IconButton = function IconButton(_ref) {
  var icon = _ref.icon,
      iconColor = _ref.iconColor,
      label = _ref.label,
      otherProps = _objectWithoutProperties(_ref, ['icon', 'iconColor', 'label']);

  return _react2.default.createElement(
    _button2.default,
    otherProps,
    _react2.default.createElement(
      'div',
      null,
      label,
      icon != null && _react2.default.createElement(_icon2.default, { style: { paddingLeft: '10px' }, name: icon, color: iconColor, size: 12 })
    )
  );
};

IconButton.propTypes = {
  icon: _propTypes2.default.string,
  iconColor: _propTypes2.default.string,
  label: _propTypes2.default.string.isRequired
};

IconButton.defaultProps = {
  icon: null,
  iconColor: _colors2.default.grayDarker
};

var iconColor = function iconColor(props) {
  var appearance = props.appearance,
      disabled = props.disabled;

  if (disabled) {
    return 'gray';
  }
  if (appearance === 'secondary') {
    return 'black';
  }
  if (appearance === 'link') {
    return 'blue';
  }
  return 'white';
};

var MenuButton = function MenuButton(_ref2) {
  var children = _ref2.children,
      onClick = _ref2.onClick,
      otherProps = _objectWithoutProperties(_ref2, ['children', 'onClick']);

  if (otherProps.disabled || otherProps.loading) {
    return _react2.default.createElement(IconButton, _extends({}, otherProps, { iconColor: iconColor(otherProps) }));
  }
  var actions = _react2.default.createElement(
    _menu.Menu,
    null,
    _react2.default.Children.map(children, function (item) {
      return _react2.default.createElement(MenuButtonAction, item.props);
    })
  );
  return _react2.default.createElement(
    _popover2.default,
    { content: actions },
    _react2.default.createElement(IconButton, _extends({}, otherProps, { iconColor: iconColor(otherProps), onClick: onClick }))
  );
};

MenuButton.propTypes = {
  appearance: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  children: _propTypes2.default.node.isRequired,
  icon: _propTypes2.default.string,
  label: _propTypes2.default.string.isRequired,
  onClick: _propTypes2.default.func
};

MenuButton.defaultProps = {
  appearance: null,
  disabled: false,
  icon: null,
  onClick: undefined
};

MenuButton.displayName = 'MenuButton';

exports.MenuButton = MenuButton;
exports.MenuButtonAction = MenuButtonAction;