'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _time_ago = require('./time_ago');

var _time_ago2 = _interopRequireDefault(_time_ago);

require('../css/notification_center_item.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NotificationCenterItem = function (_React$Component) {
  _inherits(NotificationCenterItem, _React$Component);

  function NotificationCenterItem(props) {
    _classCallCheck(this, NotificationCenterItem);

    var _this = _possibleConstructorReturn(this, (NotificationCenterItem.__proto__ || Object.getPrototypeOf(NotificationCenterItem)).call(this, props));

    _this.markAsRead = function (event) {
      var _this$props = _this.props,
          id = _this$props.id,
          onRead = _this$props.onRead,
          read = _this$props.read;

      event.preventDefault();
      if (read !== true) {
        onRead(id, event);
      }
      event.stopPropagation();
    };

    _this.remove = function (event) {
      var _this$props2 = _this.props,
          id = _this$props2.id,
          onRemove = _this$props2.onRemove;

      event.preventDefault();
      clearTimeout(_this.timer);
      onRemove(id, event);
      event.stopPropagation();
    };

    _this.handleBlur = function (event) {
      if (_this.node && _this.node.contains(event.relatedTarget)) return;
      _this.setState({ focused: false });
    };

    _this.handleFocus = function () {
      _this.setState({ focused: true });
    };

    _this.handleKeyDown = function (event) {
      switch (event.key) {
        case ' ':
        case 'Enter':
          event.preventDefault();
          break;
        default:
          break;
      }
    };

    _this.handleKeyUp = function (event) {
      switch (event.key) {
        case ' ':
        case 'Enter':
          _this.markAsRead(event);
          break;
        case 'Delete':
          _this.remove(event);
          break;
        default:
          break;
      }
    };

    _this.handleMouseEnter = function (event) {
      event.persist();
      _this.timer = setTimeout(function () {
        return _this.markAsRead(event);
      }, 3000);
    };

    _this.handleMouseLeave = function () {
      clearTimeout(_this.timer);
    };

    _this.handleRemoveButtonClick = function (event) {
      _this.remove(event);
    };

    _this.handleRemoveButtonKeyUp = function (event) {
      switch (event.key) {
        case ' ':
        case 'Enter':
          _this.remove(event);
          break;
        default:
          break;
      }
    };

    _this.node = null;
    _this.state = { focused: false };
    return _this;
  }

  _createClass(NotificationCenterItem, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          content = _props.content,
          extra = _props.extra,
          i18n = _props.i18n,
          icon = _props.icon,
          read = _props.read,
          time = _props.time,
          title = _props.title;
      var focused = this.state.focused;


      var classes = (0, _classnames2.default)({
        'vn-notification-center-item': true,
        'vn-notification-center-item--read': read === true,
        'vn-notification-center-item--focused': focused === true
      });

      return _react2.default.createElement(
        'div',
        {
          className: classes,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          ref: function ref(node) {
            _this2.node = node;
          },
          role: 'button',
          tabIndex: 0
        },
        _react2.default.createElement(
          'div',
          { className: 'vn-notification-center-item__icon' },
          icon && _react2.default.createElement(_icon2.default, { name: icon })
        ),
        _react2.default.createElement(
          'div',
          { className: 'vn-notification-center-item__content-wrapper' },
          title && _react2.default.createElement(
            'div',
            { className: 'vn-notification-center-item__title' },
            title
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-notification-center-item__content' },
            content
          ),
          extra && _react2.default.createElement(
            'div',
            { className: 'vn-notification-center-item__extra' },
            extra
          ),
          time && _react2.default.createElement(
            'div',
            { className: 'vn-notification-center-item__time-ago' },
            time instanceof Date && _react2.default.createElement(_time_ago2.default, { time: time, i18n: i18n }),
            !(time instanceof Date) && time
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'vn-notification-center-item__state' },
          read !== true && _react2.default.createElement(_icon2.default, { color: 'orange', name: 'circle', size: 8 })
        ),
        _react2.default.createElement(
          'button',
          {
            className: 'vn-notification-center-item__remove-button',
            onClick: this.handleRemoveButtonClick,
            onKeyUp: this.handleRemoveButtonKeyUp
          },
          _react2.default.createElement(_icon2.default, {
            className: 'vn-notification-center-item__remove-button-icon',
            color: 'gray',
            name: 'delete',
            size: 8
          })
        )
      );
    }
  }]);

  return NotificationCenterItem;
}(_react2.default.Component);

NotificationCenterItem.propTypes = {
  content: _propTypes2.default.string.isRequired,
  extra: _propTypes2.default.element,
  i18n: _time_ago.i18nPropTypes,
  icon: _propTypes2.default.string,
  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
  onRead: _propTypes2.default.func.isRequired,
  onRemove: _propTypes2.default.func.isRequired,
  read: _propTypes2.default.bool,
  time: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),
  title: _propTypes2.default.string
};

NotificationCenterItem.defaultProps = {
  extra: undefined,
  i18n: _time_ago.i18nDefaultProps,
  icon: undefined,
  read: false,
  time: undefined,
  title: undefined
};

NotificationCenterItem.displayName = 'NotificationCenterItem';

exports.default = NotificationCenterItem;