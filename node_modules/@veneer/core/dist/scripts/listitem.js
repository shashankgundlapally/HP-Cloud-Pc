'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _checkbox = require('./checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _dropdownmenu = require('./dropdownmenu');

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('../css/listitem.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */


var ListItem = function (_React$Component) {
  _inherits(ListItem, _React$Component);

  function ListItem(props) {
    _classCallCheck(this, ListItem);

    var _this = _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));

    _this.handleClick = function (event) {
      event.preventDefault();
      event.stopPropagation();
      _this.toggleDropdown();
    };

    _this.handleMouseEnter = function () {
      _this.setState({ hover: true });
    };

    _this.handleMouseLeave = function () {
      _this.setState({
        hover: false,
        isDropdownOpened: false
      });
    };

    _this.handleOnCheck = function (event) {
      if (!_this.props.checkboxDisabled) {
        event.preventDefault();
        event.stopPropagation();

        var isSelected = !_this.state.isSelected;
        _this.setState({ isSelected: isSelected });

        if (_this.props.onClickCheckbox) {
          _this.props.onClickCheckbox(_this.props.listKey, isSelected, {
            id: _this.props.id,
            checked: isSelected
          });
        }
      }
    };

    _this.handleItemClick = function (event) {
      event.preventDefault();

      if (_this.props.onClickItem) {
        _this.props.onClickItem(_this.props.id);
      }
    };

    _this.toggleDropdown = function () {
      _this.setState({
        isDropdownOpened: !_this.state.isDropdownOpened
      });
    };

    _this.state = {
      hover: false,
      isDropdownOpened: false,
      isSelected: _this.props.isSelected
    };
    return _this;
  }

  _createClass(ListItem, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        isSelected: nextProps.isSelected
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.state.isDropdownOpened) {
        window.addEventListener('click', this.toggleDropdown);
      } else {
        window.removeEventListener('click', this.toggleDropdown);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var classes = (0, _classnames2.default)({
        'vn-list-item': true,
        'vn-list-item--selected': this.state.isSelected,
        'vn-list-item__cursor': this.props.onClickItem,
        'vn-list-item--top-aligned': this.props.thumbnail
      });

      var classesCheckbox = (0, _classnames2.default)({
        'vn-list-item__checkbox': true,
        'vn-list-item__checkbox--invisible': !this.state.hover && !this.state.isSelected && !this.props.isCheckboxVisible,
        'vn-list-item__checkbox--with-thumbnail': this.props.thumbnail
      });

      var classesMenu = (0, _classnames2.default)({
        'vn-list-item__menu-button': true,
        'vn-list-item__menu-button--invisible': !this.state.hover,
        'vn-list-item__menu-button--highlighted': this.state.isDropdownOpened
      });

      var classesDropdownMenu = (0, _classnames2.default)({
        'vn-list-item__menu-button-dropdown': true,
        'vn-list-item__menu-button-dropdown--opened': this.state.isDropdownOpened
      });

      var classesThumbnail = (0, _classnames2.default)({
        'vn-list-item__thumbnail': true,
        'vn-list-item__thumbnail--invisible': this.props.selectable
      });

      var checkbox = '';
      if (this.props.selectable) {
        checkbox = _react2.default.createElement(
          'div',
          {
            role: 'checkbox',
            'aria-checked': this.state.isSelected,
            tabIndex: 0,
            className: classesCheckbox,
            onClick: this.handleOnCheck
          },
          _react2.default.createElement(_checkbox2.default, {
            checked: this.state.isSelected,
            disabled: this.props.checkboxDisabled,
            name: this.props.id.toString(),
            onClick: this.handleOnCheck,
            value: this.props.id.toString()
          })
        );
      }

      var thumbnail = '';
      if (this.props.thumbnail) {
        thumbnail = _react2.default.createElement(
          'div',
          { className: classesThumbnail },
          this.props.thumbnail
        );
      }

      var newChildren = _react2.default.Children.map(this.props.children, function (child) {
        return _react2.default.cloneElement(child);
      });

      var menu = '';
      if (this.props.actions) {
        menu = _react2.default.createElement(
          'div',
          { className: classesMenu },
          _react2.default.createElement(
            'a',
            {
              onClick: this.handleClick,
              role: 'menu',
              tabIndex: 0
            },
            _react2.default.createElement(_icon2.default, { name: 'more', color: 'gray-darker', size: 24, className: 'vn-list-item__icon' })
          ),
          _react2.default.createElement(
            'div',
            { className: classesDropdownMenu },
            _react2.default.createElement(_dropdownmenu.DropdownMenu, { items: this.props.actions })
          )
        );
      }

      var firstBlock = _react2.default.createElement(
        'div',
        { className: 'vn-list-item__first-block' },
        checkbox,
        thumbnail
      );

      var middleBlock = _react2.default.createElement(
        'div',
        { className: 'vn-list-item__middle-block' },
        newChildren
      );

      var lastBlock = '';
      if (this.props.actions) {
        lastBlock = _react2.default.createElement(
          'div',
          { className: 'vn-list-item__last-block' },
          menu
        );
      }

      return _react2.default.createElement(
        'li',
        {
          className: classes,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          onClick: this.handleItemClick,
          role: 'menuitem'
        },
        firstBlock,
        middleBlock,
        lastBlock
      );
    }
  }]);

  return ListItem;
}(_react2.default.Component);

ListItem.propTypes = {
  actions: _propTypes2.default.arrayOf(_propTypes2.default.object),
  checkboxDisabled: _propTypes2.default.bool,
  children: _propTypes2.default.node.isRequired,
  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
  isCheckboxVisible: _propTypes2.default.bool,
  isSelected: _propTypes2.default.bool,
  listKey: _propTypes2.default.number,
  onClickCheckbox: _propTypes2.default.func,
  onClickItem: _propTypes2.default.func,
  selectable: _propTypes2.default.bool,
  thumbnail: _propTypes2.default.node
};

ListItem.defaultProps = {
  actions: null,
  checkboxDisabled: false,
  isCheckboxVisible: false,
  isSelected: false,
  listKey: 0,
  onClickCheckbox: function onClickCheckbox() {},
  onClickItem: function onClickItem() {},
  selectable: true,
  thumbnail: undefined
};

ListItem.displayName = 'ListItem';

exports.default = ListItem;