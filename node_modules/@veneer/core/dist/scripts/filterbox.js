'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _checkbox = require('./checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _radio_button = require('./radio_button');

require('../css/filterbox.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var iconSetPropType = _propTypes2.default.shape({
  className: _propTypes2.default.string,
  color: _propTypes2.default.string.isRequired,
  name: _propTypes2.default.string.isRequired,
  size: _propTypes2.default.number.isRequired
});

var itemsPropType = _propTypes2.default.arrayOf(_propTypes2.default.shape({
  checked: _propTypes2.default.bool,
  iconSet: iconSetPropType,
  id: _propTypes2.default.number.isRequired,
  name: _propTypes2.default.string.isRequired,
  totalItems: _propTypes2.default.number,
  value: _propTypes2.default.node.isRequired
}));

var Label = function Label(_ref) {
  var iconSet = _ref.iconSet,
      name = _ref.name,
      totalItems = _ref.totalItems,
      disabled = _ref.disabled;
  return _react2.default.createElement(
    'span',
    { className: 'vn-filter-box__item-label' },
    iconSet != null && _react2.default.createElement(
      'span',
      { className: 'vn-filter-box__item-label-icon' },
      _react2.default.createElement(_icon2.default, {
        className: iconSet.className,
        color: iconSet.color,
        name: iconSet.name,
        size: iconSet.size
      })
    ),
    _react2.default.createElement(
      'span',
      { className: 'vn-filter-box__item-label-text', style: { width: 'calc(100% - ' + (iconSet == null ? '0px' : '20px') } },
      name,
      totalItems != null && _react2.default.createElement(
        'span',
        { className: 'vn-filter-box__item-label-text-total vn-filter-box__item-label-text-total' + (totalItems <= 0 || disabled ? '--disabled' : '') },
        '(' + totalItems + ')'
      )
    )
  );
};

Label.propTypes = {
  iconSet: iconSetPropType,
  name: _propTypes2.default.node.isRequired,
  totalItems: _propTypes2.default.number,
  disabled: _propTypes2.default.bool
};

Label.defaultProps = {
  iconSet: null,
  totalItems: null,
  disabled: false
};

var RadioGroup = function RadioGroup(_ref2) {
  var items = _ref2.items,
      onChange = _ref2.onChange,
      selectedIndex = _ref2.selectedIndex;
  return _react2.default.createElement(
    _radio_button.RadioButtons,
    { name: 'radio-buttons-name', onChange: onChange, selectedIndex: selectedIndex },
    items.map(function (item) {
      return _react2.default.createElement(_radio_button.RadioButton, {
        label: _react2.default.createElement(Label, item),
        key: item.id,
        value: item.value,
        disabled: item.disabled
      });
    })
  );
};

RadioGroup.propTypes = {
  items: itemsPropType.isRequired,
  onChange: _propTypes2.default.func,
  selectedIndex: _propTypes2.default.number
};

RadioGroup.defaultProps = {
  onChange: function onChange() {},
  selectedIndex: -1
};

var CheckboxGroup = function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  function CheckboxGroup(props) {
    _classCallCheck(this, CheckboxGroup);

    var _this = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call(this, props));

    _this.handleChange = function (changed) {
      var items = _this.state.items.map(function (i) {
        return Object.assign(i, { checked: String(i.id) === changed.target.id ? !!changed.target.checked : !!i.checked });
      });
      if (_this.props.onChange) {
        _this.props.onChange(items.filter(function (i) {
          return i.checked;
        }).map(function (i) {
          return i.id;
        }));
      }
    };

    _this.state = {
      items: props.items
    };
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        items: nextProps.items
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var maxHeight = this.props.maxHeight;
      var title = this.props.title;
      var filterItemsClass = (0, _classnames2.default)({
        'vn-filter-box__items': true,
        'vn-filter-box__items--noheader': !title
      });

      return _react2.default.createElement(
        'div',
        { className: 'vn-filter-box' },
        _react2.default.createElement(
          'ul',
          { className: filterItemsClass, style: { maxHeight: maxHeight } },
          this.state.items.map(function fltr(item) {
            var disabled = item.disabled;
            if (item.totalItems <= 0) {
              disabled = true;
              if (this.props.hideEmpty === true) {
                return null;
              }
            }

            return _react2.default.createElement(
              'li',
              { className: 'vn-filter-box__item', key: item.id },
              _react2.default.createElement(_checkbox2.default, {
                id: String(item.id),
                checked: item.checked,
                label: _react2.default.createElement(Label, item),
                name: item.name,
                onChange: this.handleChange,
                disabled: disabled
              }),
              item.items != null && _react2.default.createElement(
                'div',
                { style: { marginLeft: '20px' } },
                _react2.default.createElement(CheckboxGroup, {
                  items: item.items
                })
              )
            );
          }, this)
        )
      );
    }
  }]);

  return CheckboxGroup;
}(_react2.default.Component);

CheckboxGroup.propTypes = {
  hideEmpty: _propTypes2.default.bool,
  items: itemsPropType.isRequired,
  maxHeight: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired,
  title: _propTypes2.default.string
};

CheckboxGroup.defaultProps = {
  hideEmpty: false,
  maxHeight: '',
  title: ''
};

var ItemGroup = function ItemGroup(_ref3) {
  var items = _ref3.items,
      maxHeight = _ref3.maxHeight,
      onChange = _ref3.onChange,
      radio = _ref3.radio,
      title = _ref3.title,
      hideEmpty = _ref3.hideEmpty;
  return radio ? _react2.default.createElement(RadioGroup, {
    items: items,
    onChange: onChange,
    selectedIndex: items.findIndex(function (item) {
      return item.checked;
    })
  }) : _react2.default.createElement(CheckboxGroup, {
    items: items,
    maxHeight: maxHeight,
    onChange: onChange,
    title: title,
    hideEmpty: hideEmpty
  });
};

ItemGroup.propTypes = {
  hideEmpty: _propTypes2.default.bool,
  items: itemsPropType.isRequired,
  maxHeight: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired,
  radio: _propTypes2.default.bool,
  title: _propTypes2.default.string
};

ItemGroup.defaultProps = {
  hideEmpty: false,
  maxHeight: '',
  radio: false,
  title: ''
};

var FilterBox = function FilterBox(_ref4) {
  var items = _ref4.items,
      maxHeight = _ref4.maxHeight,
      onChange = _ref4.onChange,
      radio = _ref4.radio,
      title = _ref4.title,
      hideEmpty = _ref4.hideEmpty,
      otherProps = _objectWithoutProperties(_ref4, ['items', 'maxHeight', 'onChange', 'radio', 'title', 'hideEmpty']);

  return _react2.default.createElement(
    'div',
    _extends({ className: 'vn-filter-box' }, otherProps),
    title != null && _react2.default.createElement(
      'div',
      { className: 'vn-filter-box__header' },
      _react2.default.createElement(
        'div',
        { className: 'vn-filter-box__inner-header' },
        _react2.default.createElement(
          'span',
          { className: 'vn-filter-box__title' },
          title
        )
      )
    ),
    _react2.default.createElement(ItemGroup, {
      items: items,
      maxHeight: maxHeight,
      onChange: onChange,
      radio: radio,
      title: title,
      hideEmpty: hideEmpty
    })
  );
};

FilterBox.propTypes = {
  hideEmpty: _propTypes2.default.bool,
  items: itemsPropType.isRequired,
  maxHeight: _propTypes2.default.string,
  onChange: _propTypes2.default.func.isRequired,
  radio: _propTypes2.default.bool,
  title: _propTypes2.default.string
};

FilterBox.defaultProps = {
  hideEmpty: false,
  maxHeight: '',
  radio: false,
  title: ''
};

FilterBox.displayName = 'FilterBox';

exports.default = FilterBox;