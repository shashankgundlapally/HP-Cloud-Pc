'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _labeledicon = require('./labeledicon');

var _labeledicon2 = _interopRequireDefault(_labeledicon);

var _dropdown_options = require('./dropdown_options');

var _dropdown_options2 = _interopRequireDefault(_dropdown_options);

var _key_press_options_handler = require('./utils/key_press_options_handler');

var _key_press_options_handler2 = _interopRequireDefault(_key_press_options_handler);

require('../css/dropdown.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */


var Dropdown = function (_Component) {
  _inherits(Dropdown, _Component);

  _createClass(Dropdown, null, [{
    key: 'getSelectedIndex',
    value: function getSelectedIndex(options, value) {
      return options.findIndex(function (option) {
        return String(option.value) === String(value);
      });
    }
  }]);

  function Dropdown(props) {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

    _initialiseProps.call(_this);

    var options = props.options,
        value = props.value;

    var selectedIndex = Dropdown.getSelectedIndex(options, value);
    var inputValue = selectedIndex !== -1 ? value : undefined;
    _this.keyPressOptionsHandler = new _key_press_options_handler2.default(options, _this.keyPressOptionsHandlerCallback, 100);
    _this.state = {
      inputValue: inputValue,
      isDisabled: props.disabled,
      isError: props.error,
      isFocused: false,
      isOpen: false,
      isReadOnly: props.readOnly,
      selectedIndex: selectedIndex
    };
    return _this;
  }

  _createClass(Dropdown, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var options = nextProps.options,
          value = nextProps.value;

      var selectedIndex = Dropdown.getSelectedIndex(options, value);
      var inputValue = selectedIndex !== -1 ? value : undefined;
      this.keyPressOptionsHandler = new _key_press_options_handler2.default(options, this.keyPressOptionsHandlerCallback, 100);
      this.setState({
        inputValue: inputValue,
        isDisabled: nextProps.disabled,
        isError: nextProps.error,
        isReadOnly: nextProps.readOnly,
        selectedIndex: selectedIndex
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          options = _props.options,
          optionsOrientation = _props.optionsOrientation,
          visibleOptions = _props.visibleOptions,
          clearIcon = _props.clearIcon;
      var _state = this.state,
          inputValue = _state.inputValue,
          isDisabled = _state.isDisabled,
          isError = _state.isError,
          isFocused = _state.isFocused,
          isOpen = _state.isOpen;


      var titleClasses = {
        'vn-dropdown__title': true,
        'vn-dropdown__title--disabled': isDisabled,
        'vn-dropdown__title--error': isError,
        'vn-dropdown__title--focused': isOpen || isFocused,
        'vn-dropdown__title--open': isOpen,
        'vn-dropdown__title--open_upwards': isOpen && optionsOrientation.includes('up')
      };

      var titleTextClasses = {
        'vn-dropdown__title-text': true,
        'vn-dropdown__title-text--disabled': isDisabled,
        'vn-dropdown__title-text--two-buttons': inputValue !== undefined && clearIcon
      };

      return _react2.default.createElement(
        'div',
        { className: 'vn-dropdown', ref: function ref(node) {
            _this2.node = node;
          } },
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(titleClasses) },
          _react2.default.createElement(
            'a',
            {
              className: (0, _classnames2.default)(titleTextClasses),
              role: 'listbox',
              tabIndex: 0,
              onBlur: this.handleBlur,
              onClick: this.handleClick,
              onFocus: this.handleFocus,
              onKeyDown: this.handleKeyDown,
              onKeyPress: this.handleKeyPress
            },
            this.getTitle()
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-dropdown__button-group' },
            inputValue !== undefined && clearIcon && _react2.default.createElement(
              'a',
              {
                className: 'vn-dropdown__button',
                role: 'listbox',
                tabIndex: 0,
                onBlur: this.handleBlur,
                onClick: this.handleClearClick,
                onFocus: this.handleFocus
              },
              _react2.default.createElement(_icon2.default, { color: 'gray', name: 'delete', size: 12 })
            ),
            _react2.default.createElement(
              'a',
              {
                role: 'listbox',
                tabIndex: 0,
                className: 'vn-dropdown__button',
                onBlur: this.handleBlur,
                onClick: this.handleClick,
                onFocus: this.handleFocus,
                onKeyDown: this.handleKeyDown,
                onKeyPress: this.handleKeyPress
              },
              _react2.default.createElement(_icon2.default, { color: isDisabled ? 'gray' : 'black', name: 'arrow', size: 12 })
            )
          )
        ),
        isOpen && options.length > 0 && _react2.default.createElement(_dropdown_options2.default, {
          options: options,
          error: isError,
          visibleOptions: visibleOptions,
          onMouseDown: this.handleOptionMouseDown,
          selectedIndex: this.state.selectedIndex,
          optionsOrientation: optionsOrientation
        })
      );
    }
  }]);

  return Dropdown;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.componentDidMount = function () {
    window.addEventListener('click', _this3.handleWindowClick);
    window.addEventListener('keydown', _this3.handleWindowKeyDown);
  };

  this.componentWillUnmount = function () {
    window.removeEventListener('click', _this3.handleWindowClick);
    window.removeEventListener('keydown', _this3.handleWindowKeyDown);
  };

  this.getTitle = function () {
    var _props2 = _this3.props,
        options = _props2.options,
        placeholder = _props2.placeholder;
    var selectedIndex = _this3.state.selectedIndex;

    var selectedOption = options[selectedIndex];
    if (!selectedOption) {
      return placeholder;
    }
    if (selectedOption.icon) {
      return _react2.default.createElement(_labeledicon2.default, {
        name: selectedOption.icon,
        label: selectedOption.label || selectedOption.value
      });
    }
    return selectedOption.label || selectedOption.value;
  };

  this.setOption = function (index) {
    var _state2 = _this3.state,
        isDisabled = _state2.isDisabled,
        isReadOnly = _state2.isReadOnly;

    if (isDisabled || isReadOnly) {
      return;
    }
    var options = _this3.props.options;

    var selectedOption = options[index];
    var inputValue = selectedOption ? String(selectedOption.value) : undefined;
    _this3.setState({ inputValue: inputValue, isOpen: false, selectedIndex: index }, _this3.handleChange);
  };

  this.keyPressOptionsHandlerCallback = function (selectedIndex) {
    if (selectedIndex < 0) {
      return;
    }
    if (_this3.state.isDisabled || _this3.state.isReadOnly) {
      return;
    }
    if (_this3.state.isOpen) {
      _this3.setState({ selectedIndex: selectedIndex });
    } else {
      _this3.setOption(selectedIndex);
    }
  };

  this.closeOptions = function () {
    _this3.setState({
      isFocused: true,
      isOpen: false
    });
  };

  this.nextOptionSelection = function (keyCode) {
    var nextIndex = _this3.state.selectedIndex;
    var isOpen = _this3.state.isOpen;
    var options = _this3.props.options;

    nextIndex = keyCode === 40 ? nextIndex + 1 : nextIndex - 1;

    while (nextIndex >= 0 && nextIndex <= options.length - 1) {
      if (options[nextIndex].disabled === true) {
        nextIndex = keyCode === 40 ? nextIndex + 1 : nextIndex - 1;
      } else {
        break;
      }
    }

    if (nextIndex < 0 || nextIndex > options.length - 1) {
      return;
    }

    _this3.setState({ selectedIndex: nextIndex });
    if (!isOpen) {
      _this3.setOption(nextIndex);
    }
  };

  this.handleWindowClick = function (event) {
    if (_this3.node.contains(event.target)) return;
    _this3.closeOptions();
  };

  this.handleWindowKeyDown = function (event) {
    switch (event.keyCode) {
      case 27: // ESC
      case 13:
        // ENTER
        _this3.closeOptions();
        break;
      default:
        break;
    }
  };

  this.handleBlur = function (event) {
    event.preventDefault();
    _this3.setState({
      isFocused: false
    });
  };

  this.handleChange = function () {
    var onChange = _this3.props.onChange;
    var inputValue = _this3.state.inputValue;

    if (onChange) {
      onChange(inputValue);
    }
  };

  this.handleClearClick = function (event) {
    event.stopPropagation();
    event.preventDefault();
    var _state3 = _this3.state,
        isDisabled = _state3.isDisabled,
        isReadOnly = _state3.isReadOnly;

    if (isDisabled || isReadOnly) {
      return;
    }
    _this3.setState({ inputValue: undefined, selectedIndex: -1 }, _this3.handleChange);
  };

  this.handleClick = function (event) {
    event.preventDefault();
    var _state4 = _this3.state,
        isDisabled = _state4.isDisabled,
        isOpen = _state4.isOpen;

    if (isDisabled) {
      return;
    }
    var options = _this3.props.options;

    if (options.length === 0) {
      return;
    }
    _this3.setState({
      isOpen: !isOpen
    });
  };

  this.handleFocus = function (event) {
    event.preventDefault();
    if (_this3.state.isDisabled) {
      return;
    }

    _this3.setState({
      isFocused: true
    });
  };

  this.handleKeyPress = function (event) {
    if (!Object.keys(_this3.props.options)) {
      return;
    }
    if (_this3.state.isDisabled) {
      return;
    }
    event.preventDefault();
    _this3.keyPressOptionsHandler.handle(event.key);
  };

  this.handleKeyDown = function (event) {
    if (!Object.keys(_this3.props.options)) {
      return;
    }
    if (_this3.state.isDisabled) {
      return;
    }

    var _state5 = _this3.state,
        isOpen = _state5.isOpen,
        selectedIndex = _state5.selectedIndex;

    var options = _this3.props.options;
    switch (event.keyCode) {
      case 32:
        // SPACE
        _this3.setState({
          isOpen: !isOpen
        });
        event.preventDefault();
        break;

      case 38:
        // UP
        if (selectedIndex > 0) {
          _this3.nextOptionSelection(38);
        }
        event.preventDefault();
        break;

      case 40:
        // DOWN
        if (selectedIndex < options.length - 1) {
          _this3.nextOptionSelection(40);
        }
        event.preventDefault();
        break;

      case 27:
        // ESC
        _this3.setState({
          isOpen: false
        });
        event.preventDefault();
        break;

      case 13:
        // ENTER
        _this3.setOption(selectedIndex);
        event.preventDefault();
        break;

      default:
        break;
    }
  };

  this.handleOptionMouseDown = function (option, index, event) {
    event.preventDefault();
    _this3.setOption(index);
  };
};

Dropdown.propTypes = {
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    icon: _propTypes2.default.string,
    label: _propTypes2.default.string,
    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
  })).isRequired,
  optionsOrientation: _propTypes2.default.arrayOf(_propTypes2.default.string),
  placeholder: _propTypes2.default.string,
  readOnly: _propTypes2.default.bool,
  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  visibleOptions: _propTypes2.default.number,
  clearIcon: _propTypes2.default.bool
};

Dropdown.defaultProps = {
  disabled: false,
  error: false,
  onChange: function onChange() {},
  optionsOrientation: [],
  placeholder: '',
  readOnly: false,
  value: undefined,
  visibleOptions: 10,
  clearIcon: true
};

Dropdown.displayName = 'Dropdown';

exports.default = Dropdown;