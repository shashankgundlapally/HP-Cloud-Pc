'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('../css/list.css');

var _checkbox = require('./checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var List = function (_React$Component) {
  _inherits(List, _React$Component);

  function List(props) {
    _classCallCheck(this, List);

    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));

    _initialiseProps.call(_this);

    var childrenNodes = _react2.default.Children.toArray(props.children);
    var selectedChildren = [];

    childrenNodes.forEach(function (child) {
      selectedChildren.push(child.props.isSelected);
    });

    _this.state = {
      selectedChildren: selectedChildren,
      selectAll: props.selectAll
    };
    return _this;
  }

  _createClass(List, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var childrenNodes = _react2.default.Children.toArray(nextProps.children);
      var selectedChildren = [];

      childrenNodes.forEach(function (child) {
        selectedChildren.push(child.props.isSelected);
      });

      this.state = {
        selectedChildren: selectedChildren,
        selectAll: nextProps.selectAll
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          headerChildren = _props.headerChildren,
          onChange = _props.onChange,
          selectAll = _props.selectAll,
          children = _props.children,
          otherProps = _objectWithoutProperties(_props, ['headerChildren', 'onChange', 'selectAll', 'children']);

      var newChildren = _react2.default.Children.map(children, function (child, index) {
        return _react2.default.cloneElement(child, {
          onClickCheckbox: _this2.updateSelectedChildren,
          listKey: index,
          isSelected: _this2.state.selectedChildren[index] || _this2.state.selectAll,
          isCheckboxVisible: _this2.state.selectedChildren.some(function (selected) {
            return selected;
          })
        });
      });

      return _react2.default.createElement(
        'div',
        otherProps,
        headerChildren && _react2.default.createElement(
          'div',
          { className: 'vn-list__header' },
          _react2.default.createElement(_checkbox2.default, { name: 'selectAllCheckbox', checked: this.state.selectAll, onChange: this.selectAll }),
          _react2.default.createElement(
            'div',
            { className: 'vn-list__header__content' },
            headerChildren
          )
        ),
        _react2.default.createElement(
          'ul',
          { className: 'vn-list' },
          newChildren
        )
      );
    }
  }]);

  return List;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.updateSelectedChildren = function (index, selected, onChangeOptions) {
    if (index !== undefined) {
      var selectedList = _this3.state.selectedChildren;
      selectedList[index] = selected;

      _this3.setState({
        selectedChildren: selectedList
      });

      // if all items are selected, selectAll is set to true
      if (_this3.props.headerChildren) {
        if (selectedList.every(function (selectedCheckbox) {
          return selectedCheckbox;
        })) {
          _this3.setState({ selectAll: true });
        } else {
          _this3.setState({ selectAll: false });
        }
      }
    }
    _this3.props.onChange(onChangeOptions);
  };

  this.selectAll = function () {
    var selectedChildren = _this3.state.selectedChildren.map(function () {
      return !_this3.state.selectAll;
    });
    _this3.setState({
      selectedChildren: selectedChildren,
      selectAll: !_this3.state.selectAll
    }, function () {
      if (_this3.props.onChange) _this3.props.onChange({ id: 'all', checked: _this3.state.selectAll });
    });
  };
};

List.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  children: _propTypes2.default.node,
  headerChildren: _propTypes2.default.node,
  selectAll: _propTypes2.default.bool
};

List.defaultProps = {
  children: [],
  headerChildren: null,
  selectAll: false
};

List.displayName = 'List';

exports.default = List;