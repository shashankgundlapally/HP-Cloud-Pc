'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon_button = require('./icon_button');

var _icon_button2 = _interopRequireDefault(_icon_button);

var _notification_badge = require('./notification_badge');

var _notification_badge2 = _interopRequireDefault(_notification_badge);

var _notification_center_item = require('./notification_center_item');

var _notification_center_item2 = _interopRequireDefault(_notification_center_item);

require('../css/notification_center.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */


var BellButton = function BellButton(_ref) {
  var onClick = _ref.onClick,
      unreadCount = _ref.unreadCount;
  return _react2.default.createElement(
    'div',
    { className: 'vn-notification-center__bell-button' },
    unreadCount === 0 && _react2.default.createElement(
      'div',
      { className: 'vn-notification-center__bell-button-wrapper' },
      _react2.default.createElement(_icon_button2.default, { icon: 'alarm', onClick: onClick })
    ),
    unreadCount > 0 && _react2.default.createElement(
      _notification_badge2.default,
      { position: 'top-left', value: unreadCount },
      _react2.default.createElement(_icon_button2.default, { icon: 'alarm', onClick: onClick })
    )
  );
};

BellButton.propTypes = {
  onClick: _propTypes2.default.func.isRequired,
  unreadCount: _propTypes2.default.number
};

BellButton.defaultProps = {
  unreadCount: 0
};

var NotificationCenter = function (_Component) {
  _inherits(NotificationCenter, _Component);

  function NotificationCenter(props) {
    _classCallCheck(this, NotificationCenter);

    var _this = _possibleConstructorReturn(this, (NotificationCenter.__proto__ || Object.getPrototypeOf(NotificationCenter)).call(this, props));

    _this.closeIfOpen = function () {
      if (!_this.state.open) {
        return;
      }
      _this.setState({ open: false });
    };

    _this.countUnreadNotifications = function () {
      var children = _this.props.children;

      if (children) {
        return _react2.default.Children.map(children, function (child) {
          return child.props.read === false;
        }).reduce(function (a, v) {
          return a * 1 + v;
        }, 0);
      }
      return 0;
    };

    _this.handleBellButtonClick = function () {
      _this.setState({
        open: !_this.state.open
      });
    };

    _this.handleWindowMouseDown = function (event) {
      if (_this.node && _this.node.contains(event.target)) return;
      _this.closeIfOpen();
    };

    _this.handleWindowKeyUp = function (event) {
      switch (event.key) {
        case 'Escape':
          _this.closeIfOpen();
          break;
        default:
          break;
      }
    };

    _this.node = null;
    _this.state = {
      open: false
    };
    return _this;
  }

  _createClass(NotificationCenter, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('mousedown', this.handleWindowMouseDown);
      window.addEventListener('keyup', this.handleWindowKeyUp);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('mousedown', this.handleWindowMouseDown);
      window.removeEventListener('keyup', this.handleWindowKeyUp);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          i18n = _props.i18n;
      var open = this.state.open;


      var wrapperClasses = (0, _classnames2.default)({
        'vn-notification-center__wrapper': true,
        'vn-notification-center__wrapper--visible': open === true
      });
      var childrenCount = _react2.default.Children.count(children);

      return _react2.default.createElement(
        'div',
        { className: 'vn-notification-center', ref: function ref(node) {
            _this2.node = node;
          } },
        _react2.default.createElement(
          'div',
          { className: wrapperClasses },
          _react2.default.createElement(
            'div',
            { className: 'vn-notification-center__header' },
            _react2.default.createElement(
              'div',
              { className: 'vn-notification-center__title' },
              i18n.title
            ),
            _react2.default.createElement(BellButton, {
              unreadCount: this.countUnreadNotifications(),
              onClick: this.handleBellButtonClick
            })
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-notification-center__container-wrapper' },
            _react2.default.createElement(
              'div',
              { className: 'vn-notification-center__container' },
              childrenCount === 0 && _react2.default.createElement(
                'div',
                { className: 'vn-notification-center__no-notifications' },
                i18n.noNotifications
              ),
              childrenCount > 0 && _react2.default.Children.map(children, function (child) {
                return _react2.default.cloneElement(child, { i18n: i18n.timeAgo });
              })
            )
          )
        )
      );
    }
  }]);

  return NotificationCenter;
}(_react.Component);

NotificationCenter.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({ type: _propTypes2.default.oneOf([_notification_center_item2.default]) })), _propTypes2.default.shape({ type: _propTypes2.default.oneOf([_notification_center_item2.default]) })]),
  i18n: _propTypes2.default.shape({
    noNotifications: _propTypes2.default.string.isRequired,
    title: _propTypes2.default.string.isRequired
  })
};

NotificationCenter.defaultProps = {
  children: undefined,
  i18n: {
    noNotifications: 'There are no notifications.',
    title: 'Notifications'
  }
};

NotificationCenter.displayName = 'NotificationCenter';

exports.default = NotificationCenter;