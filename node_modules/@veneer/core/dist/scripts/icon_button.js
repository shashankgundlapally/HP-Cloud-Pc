'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('../css/icon_button.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var IconButton = function IconButton(_ref) {
  var className = _ref.className,
      disabled = _ref.disabled,
      icon = _ref.icon,
      loading = _ref.loading,
      transparent = _ref.transparent,
      otherProps = _objectWithoutProperties(_ref, ['className', 'disabled', 'icon', 'loading', 'transparent']);

  var appearance = otherProps.appearance,
      buttonProps = _objectWithoutProperties(otherProps, ['appearance']);

  var buttonClassName = (0, _classnames2.default)(_defineProperty({
    'vn-icon-button': true,
    'vn-icon-button--transparent': transparent
  }, className, className !== undefined));

  return _react2.default.createElement(
    _button2.default,
    _extends({ className: buttonClassName, disabled: disabled, loading: loading }, buttonProps),
    loading === false && _react2.default.createElement(_icon2.default, { name: icon, color: disabled ? 'gray' : 'black', size: 24 })
  );
};

IconButton.propTypes = {
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  icon: _propTypes2.default.string.isRequired,
  loading: _propTypes2.default.bool,
  transparent: _propTypes2.default.bool
};

IconButton.defaultProps = {
  className: '',
  disabled: false,
  loading: false,
  transparent: false
};

IconButton.displayName = 'IconButton';

exports.default = IconButton;