'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactTransitionGroup = require('react-transition-group');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('../css/toggle.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toggle = function (_Component) {
  _inherits(Toggle, _Component);

  function Toggle(props) {
    _classCallCheck(this, Toggle);

    var _this = _possibleConstructorReturn(this, (Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call(this, props));

    _this.handleEvent = function (event) {
      if (_this.props.disabled) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      _this.setState({
        on: !_this.state.on
      }, function () {
        _this.props.onChange(_this.state.on);
      });
    };

    _this.handleClick = function (event) {
      _this.handleEvent(event);
    };

    _this.handleKeyDown = function (event) {
      switch (event.keyCode) {
        case 32: // SPACE
        case 13:
          // ENTER
          _this.handleEvent(event);
          break;
        default:
          break;
      }
    };

    _this.state = {
      on: props.on
    };
    return _this;
  }

  _createClass(Toggle, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        on: nextProps.on
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var toggleClasses = {
        'vn-toggle': true,
        'vn-toggle--on': this.state.on,
        'vn-toggle--disabled': this.props.disabled
      };

      var toggleCircleClasses = {
        'vn-toggle__circle': true,
        'vn-toggle__circle--on': this.state.on,
        'vn-toggle__circle--disabled': this.props.disabled
      };

      return _react2.default.createElement(
        _reactTransitionGroup.CSSTransition,
        { 'in': this.state.on && !this.props.disabled, timeout: 500, classNames: 'vn-toggle' },
        _react2.default.createElement(
          'a',
          _extends({}, this.props.id !== '' && { id: this.props.id }, {
            className: (0, _classnames2.default)(toggleClasses),
            onClick: this.handleClick,
            onKeyDown: this.handleKeyDown,
            role: 'switch',
            'aria-checked': this.state.on,
            tabIndex: 0
          }),
          this.props.disabled ? _react2.default.createElement('div', { className: (0, _classnames2.default)(toggleCircleClasses) }) : _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { 'in': this.state.on, timeout: 500, classNames: 'vn-toggle__circle' },
            _react2.default.createElement('div', { className: (0, _classnames2.default)(toggleCircleClasses) })
          )
        )
      );
    }
  }]);

  return Toggle;
}(_react.Component);

Toggle.propTypes = {
  disabled: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  on: _propTypes2.default.bool,
  onChange: _propTypes2.default.func
};

Toggle.defaultProps = {
  disabled: false,
  id: '',
  on: false,
  onChange: function onChange() {}
};

Toggle.displayName = 'Toggle';

exports.default = Toggle;