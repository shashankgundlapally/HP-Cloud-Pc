'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactScroll = require('react-scroll');

var _reactScroll2 = _interopRequireDefault(_reactScroll);

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

require('../css/anchor_menu.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Events = _reactScroll2.default.Events;
var scrollSpy = _reactScroll2.default.scrollSpy;

var AnchorMenu = function (_Component) {
  _inherits(AnchorMenu, _Component);

  function AnchorMenu(props) {
    _classCallCheck(this, AnchorMenu);

    var _this = _possibleConstructorReturn(this, (AnchorMenu.__proto__ || Object.getPrototypeOf(AnchorMenu)).call(this, props));

    _this.selectItem = function (item) {
      _this.setState({
        selectedItem: item
      });
    };

    _this.state = {
      selectedItem: null
    };
    return _this;
  }

  _createClass(AnchorMenu, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      Events.scrollEvent.register('begin');
      Events.scrollEvent.register('end');
      scrollSpy.update();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      Events.scrollEvent.remove('begin');
      Events.scrollEvent.remove('end');
    }
  }, {
    key: 'checkItemSelected',
    value: function checkItemSelected(items) {
      var _this2 = this;

      return _react2.default.Children.toArray(items).map(function (item) {
        if (!_react2.default.isValidElement(item)) {
          return item;
        }

        if (item.type.displayName === 'AnchorMenuItem') {
          var offset = _this2.props.offset;
          var anchorTo = _this2.state.selectedItem ? _this2.state.selectedItem.props.anchorTo : null;
          var selected = item.props.anchorTo === anchorTo;

          var itemProps = {};

          itemProps = { key: _shortid2.default.generate(), selected: selected, selectItem: _this2.selectItem, offset: offset };

          if (item.props.children !== null) {
            itemProps.children = _this2.checkItemSelected(item.props.children);
          }

          return _react2.default.cloneElement(item, itemProps);
        }

        return item;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var classes = (0, _classnames2.default)({
        'vn-anchor-menu': true
      });

      var children = this.checkItemSelected(this.props.children);

      return _react2.default.createElement(
        'div',
        { className: classes, style: this.props.style },
        _react2.default.createElement(
          'ul',
          null,
          children
        )
      );
    }
  }]);

  return AnchorMenu;
}(_react.Component);

AnchorMenu.propTypes = {
  children: _propTypes2.default.node.isRequired,
  style: _propTypes2.default.object, // eslint-disable-line react/forbid-prop-types
  offset: _propTypes2.default.number
};

AnchorMenu.defaultProps = {
  style: undefined,
  offset: 0
};

AnchorMenu.displayName = 'AnchorMenu';

exports.default = AnchorMenu;