'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButton = exports.RadioButtons = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('../css/radio_button.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RadioButtons = function (_React$Component) {
  _inherits(RadioButtons, _React$Component);

  function RadioButtons(props) {
    _classCallCheck(this, RadioButtons);

    var _this = _possibleConstructorReturn(this, (RadioButtons.__proto__ || Object.getPrototypeOf(RadioButtons)).call(this, props));

    _this.handleChange = function (index, value) {
      _this.setState({
        selectedIndex: index
      });

      if (_this.props.onChange) {
        _this.props.onChange(index, value);
      }
    };

    _this.prepareChildren = function () {
      var children = [];

      _react2.default.Children.forEach(_this.props.children, function (child, index) {
        children.push(_react2.default.cloneElement(child, {
          checked: index === _this.state.selectedIndex,
          index: index,
          name: _this.props.name,
          onChange: _this.handleChange,
          key: index
        }));
      });

      return children;
    };

    _this.state = {
      selectedIndex: props.selectedIndex
    };
    return _this;
  }

  _createClass(RadioButtons, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var props = this.props;

      if (props.selectedIndex !== nextProps.selectedIndex) {
        this.setState({ selectedIndex: nextProps.selectedIndex });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.prepareChildren();

      // eslint-disable-next-line no-unused-vars

      var _props = this.props,
          alignment = _props.alignment,
          className = _props.className,
          onChange = _props.onChange,
          selectedIndex = _props.selectedIndex,
          remainingProps = _objectWithoutProperties(_props, ['alignment', 'className', 'onChange', 'selectedIndex']);

      var classes = (0, _classnames2.default)('vn-radio-buttons', className);

      return _react2.default.createElement(
        'ul',
        _extends({}, remainingProps, { className: (0, _classnames2.default)(classes) }),
        children.map(function (item) {
          return _react2.default.createElement(
            'li',
            { key: item.key, className: 'vn-radio-buttons__item--alignment-' + alignment },
            item
          );
        })
      );
    }
  }]);

  return RadioButtons;
}(_react2.default.Component);

RadioButtons.propTypes = {
  alignment: _propTypes2.default.oneOf(['horizontal', 'vertical']),
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  selectedIndex: _propTypes2.default.number
};

RadioButtons.defaultProps = {
  alignment: 'vertical',
  className: null,
  onChange: function onChange() {},
  selectedIndex: -1
};

/*----------------------------------------------------------------------------------------------*/

var RadioButton = function RadioButton(_ref) {
  var _ref$checked = _ref.checked,
      checked = _ref$checked === undefined ? false : _ref$checked,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      index = _ref.index,
      label = _ref.label,
      onChange = _ref.onChange,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, ['checked', 'disabled', 'index', 'label', 'onChange', 'value']);

  var handleChange = function handleChange() {
    if (disabled) {
      return;
    }

    if (onChange) {
      onChange(index, value);
    }
  };

  var className = props.className,
      id = props.id,
      remainingProps = _objectWithoutProperties(props, ['className', 'id']);

  var labelClasses = {
    'vn-radio-button-box': true,
    'vn-radio-button-box--disabled': disabled
  };

  if (className) {
    labelClasses[className] = true;
  }

  var iconClasses = {
    'vn-radio-button-box__icon': true,
    'vn-radio-button-box__icon--checked': checked,
    'vn-radio-button-box__icon--disabled': disabled
  };
  var color = disabled ? 'gray' : 'blue';
  var icon = _react2.default.createElement(_icon2.default, { name: 'circle', className: (0, _classnames2.default)(iconClasses), color: color });

  var labelText = void 0;
  if (label) {
    labelText = _react2.default.createElement(
      'span',
      { className: 'vn-radio-button-box__span-text' },
      label
    );
  }

  return _react2.default.createElement(
    'label',
    { className: (0, _classnames2.default)(labelClasses), htmlFor: id },
    _react2.default.createElement('input', _extends({}, remainingProps, {
      id: id,
      className: 'vn-radio-button-box__input',
      onChange: handleChange,
      checked: checked,
      type: 'radio',
      disabled: disabled
    })),
    icon,
    labelText
  );
};

RadioButton.propTypes = {
  checked: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  index: _propTypes2.default.number.isRequired,
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  onChange: _propTypes2.default.func,
  value: _propTypes2.default.string
};

RadioButton.defaultProps = {
  checked: false,
  className: null,
  disabled: false,
  id: null,
  label: null,
  onChange: undefined,
  value: undefined
};

RadioButtons.displayName = 'RadioButtons';
RadioButton.displayName = 'RadioButton';

exports.RadioButtons = RadioButtons;
exports.RadioButton = RadioButton;