'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('../css/textarea.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextArea = function (_React$Component) {
  _inherits(TextArea, _React$Component);

  function TextArea(props) {
    _classCallCheck(this, TextArea);

    var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call(this, props));

    _this.handleChange = function (event) {
      _this.setState({
        error: false,
        value: event.target.value
      });

      if (_this.props.onChange) {
        _this.props.onChange(event.target.value);
      }
    };

    _this.state = {
      error: props.error,
      value: props.value
    };
    return _this;
  }

  _createClass(TextArea, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        error: nextProps.error,
        value: nextProps.value
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          height = _props.height,
          maxLength = _props.maxLength,
          name = _props.name,
          placeholder = _props.placeholder,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          onBlur = _props.onBlur,
          onFocus = _props.onFocus;

      var classes = {
        'vn-textarea': true,
        'vn-textarea__multi-line': true,
        'vn-textarea--error': this.state.error,
        'vn-textarea--expanded': true
      };

      if (className) {
        classes[className] = true;
      }

      return _react2.default.createElement('textarea', {
        className: (0, _classnames2.default)(classes),
        disabled: disabled,
        id: name,
        maxLength: maxLength,
        name: name,
        placeholder: placeholder,
        readOnly: readOnly,
        style: { height: height },
        onBlur: onBlur,
        onChange: this.handleChange,
        onFocus: onFocus,
        value: this.state.value
      });
    }
  }]);

  return TextArea;
}(_react2.default.Component);

TextArea.propTypes = {
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  height: _propTypes2.default.string,
  maxLength: _propTypes2.default.number,
  name: _propTypes2.default.string.isRequired,
  onBlur: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  placeholder: _propTypes2.default.string,
  readOnly: _propTypes2.default.bool,
  value: _propTypes2.default.string
};

TextArea.defaultProps = {
  className: null,
  disabled: false,
  error: false,
  height: '120px',
  maxLength: null,
  placeholder: null,
  readOnly: false,
  onBlur: undefined,
  onChange: undefined,
  onFocus: undefined,
  value: undefined
};

TextArea.displayName = 'TextArea';

exports.default = TextArea;