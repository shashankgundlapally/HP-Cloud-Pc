'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _popover = require('./popover');

var _popover2 = _interopRequireDefault(_popover);

var _menu = require('./menu');

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('../css/pagination.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultPageLinksToRender = 5;

var Information = function Information(_ref) {
  var i18n = _ref.i18n,
      onChangePageSize = _ref.onChangePageSize,
      pageSize = _ref.pageSize,
      pageSizeOptions = _ref.pageSizeOptions,
      coordinates = _ref.coordinates,
      pageSizeOptionsPosition = _ref.pageSizeOptionsPosition;

  var renderLabel = function renderLabel() {
    var start = coordinates.start,
        end = coordinates.end,
        last = coordinates.last;

    return i18n.information.replace('%{start}', start).replace('%{end}', end).replace('%{total}', last);
  };

  var renderShowingLabel = function renderShowingLabel() {
    return _react2.default.createElement(
      'span',
      { className: 'vn-pagination__information__showing' },
      ' ',
      i18n.showing,
      ' '
    );
  };

  var handleClick = function handleClick(event, value) {
    event.preventDefault();
    if (onChangePageSize) {
      onChangePageSize(value);
    }
  };

  var renderPopoverContent = function renderPopoverContent() {
    return _react2.default.createElement(
      _menu.Menu,
      null,
      pageSizeOptions.map(function (pageSizeOption) {
        return _react2.default.createElement(_menu.MenuItem, {
          disabled: pageSizeOption === pageSize,
          key: pageSizeOption,
          label: pageSizeOption,
          value: pageSizeOption,
          onClick: handleClick
        });
      })
    );
  };

  return _react2.default.createElement(
    'div',
    { className: 'vn-pagination__information' },
    i18n.showingPosition === 'before' && renderShowingLabel(),
    _react2.default.createElement(
      _popover2.default,
      { content: renderPopoverContent(), position: pageSizeOptionsPosition },
      _react2.default.createElement(
        'span',
        null,
        renderLabel()
      )
    ),
    i18n.showingPosition === 'after' && renderShowingLabel()
  );
};

Information.propTypes = {
  coordinates: _propTypes2.default.shape({
    start: _propTypes2.default.number.isRequired,
    end: _propTypes2.default.number.isRequired,
    last: _propTypes2.default.number.isRequired
  }).isRequired,
  i18n: _propTypes2.default.shape({
    changePageSize: _propTypes2.default.string.isRequired,
    information: _propTypes2.default.string.isRequired
  }).isRequired,
  onChangePageSize: _propTypes2.default.func,
  pageSize: _propTypes2.default.number,
  pageSizeOptions: _propTypes2.default.arrayOf(_propTypes2.default.number),
  pageSizeOptionsPosition: _propTypes2.default.string
};

Information.defaultProps = {
  onChangePageSize: null,
  pageSize: 25,
  pageSizeOptions: [25, 50, 100],
  pageSizeOptionsPosition: 'down'
};

var NavigationItem = function (_React$Component) {
  _inherits(NavigationItem, _React$Component);

  function NavigationItem(props) {
    _classCallCheck(this, NavigationItem);

    var _this = _possibleConstructorReturn(this, (NavigationItem.__proto__ || Object.getPrototypeOf(NavigationItem)).call(this, props));

    _this.state = {
      hover: false
    };
    _this.onMouseOver = _this.onMouseOver.bind(_this);
    _this.onMouseOut = _this.onMouseOut.bind(_this);
    return _this;
  }

  _createClass(NavigationItem, [{
    key: 'onMouseOver',
    value: function onMouseOver() {
      this.setState({ hover: true });
    }
  }, {
    key: 'onMouseOut',
    value: function onMouseOut() {
      this.setState({ hover: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          label = _props.label,
          enabled = _props.enabled,
          page = _props.page,
          handleClick = _props.handleClick;

      var isPage = !isNaN(id);
      var is3dots = page === -1;
      var itemClassNames = (0, _classnames2.default)({
        'vn-pagination__navigation-item': true,
        'vn-pagination__navigation-item--disabled': !enabled,
        'vn-pagination__navigation-item--active': !enabled && isPage
      });
      var itemPageClassNames = (0, _classnames2.default)({
        'vn-pagination__navigation-item-page': isPage,
        'vn-pagination__navigation-item-page--linked': enabled && isPage,
        'vn-pagination__navigation-item-page--active': !enabled && isPage,
        'vn-pagination__navigation-item-page--more': is3dots
      });

      var iconColor = 'blue';
      if (this.state.hover) {
        iconColor = 'blue-dark';
      }
      return _react2.default.createElement(
        'li',
        {
          key: id,
          className: itemClassNames,
          onMouseOver: this.onMouseOver,
          onMouseOut: this.onMouseOut
        },
        enabled && _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'a',
            { href: '#navigation', 'data-page_number': page, onClick: handleClick, className: itemPageClassNames },
            id === 'previous' && _react2.default.createElement(_icon2.default, { name: 'arrow', className: 'vn-pagination__navigation-icon-previous', color: iconColor, size: 8 }),
            label,
            id === 'next' && _react2.default.createElement(_icon2.default, { name: 'arrow', className: 'vn-pagination__navigation-icon-next', color: iconColor, size: 8 })
          )
        ),
        !enabled && _react2.default.createElement(
          'div',
          { className: itemPageClassNames },
          id === 'previous' && _react2.default.createElement(_icon2.default, { name: 'arrow', className: 'vn-pagination__navigation-icon-previous', color: 'gray', size: 8 }),
          label,
          id === 'next' && _react2.default.createElement(_icon2.default, { name: 'arrow', className: 'vn-pagination__navigation-icon-next', color: 'gray', size: 8 })
        )
      );
    }
  }]);

  return NavigationItem;
}(_react2.default.Component);

NavigationItem.propTypes = {
  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
  label: _propTypes2.default.string.isRequired,
  enabled: _propTypes2.default.bool.isRequired,
  page: _propTypes2.default.number.isRequired,
  handleClick: _propTypes2.default.func.isRequired
};

var Navigation = function Navigation(_ref2) {
  var i18n = _ref2.i18n,
      onPaginate = _ref2.onPaginate,
      coordinates = _ref2.coordinates;

  var page3dots = -1;

  var setPreviousAndNextNavs = function setPreviousAndNextNavs(items, i18nn, current, first, last) {
    items.unshift({ key: 'previous', label: '' + i18nn.previous.toUpperCase(), enabled: current > first, page: current - 1 });
    items.push({ key: 'next', label: '' + i18nn.next.toUpperCase(), enabled: current < last, page: current + 1 });
  };

  var get3dotsNav = function get3dotsNav() {
    return { label: '...', enabled: true, page: page3dots };
  };

  var set3DotsArrayBeginning = function set3DotsArrayBeginning(items, first, current) {
    items.shift();
    items.unshift(get3dotsNav());
    items.unshift({ key: first, label: first, enabled: current !== first, page: first });
  };

  var set3DotsArrayEnding = function set3DotsArrayEnding(items, last, current) {
    items.pop();
    items.push(get3dotsNav());
    items.push({ key: last, label: last, enabled: current !== last, page: last });
  };

  var set3DotsAccordingNavsBeingShown = function set3DotsAccordingNavsBeingShown(firstNavIsBeingShown, lastNavIsBeingShown, items, current, first, last) {
    if (!firstNavIsBeingShown) set3DotsArrayBeginning(items, first, current);
    if (!lastNavIsBeingShown) set3DotsArrayEnding(items, last, current);
  };

  var logic3dots = function logic3dots(firstNavIsBeingShown, lastNavIsBeingShown, items, current, first, last) {
    if (items.length >= defaultPageLinksToRender) {
      if (firstNavIsBeingShown !== lastNavIsBeingShown) {
        set3DotsAccordingNavsBeingShown(firstNavIsBeingShown, lastNavIsBeingShown, items, current, first, last);
      } else if (firstNavIsBeingShown === false && lastNavIsBeingShown === false) {
        set3DotsAccordingNavsBeingShown(firstNavIsBeingShown, lastNavIsBeingShown, items, current, first, last);
      }
    }
  };

  var handleClick = function handleClick(event) {
    event.preventDefault();
    if (onPaginate) {
      var pageClicked = parseInt(event.currentTarget.dataset.page_number, 10);
      if (pageClicked !== page3dots) {
        onPaginate(pageClicked);
      }
    }
  };

  var first = coordinates.first,
      start = coordinates.start,
      current = coordinates.current,
      end = coordinates.end,
      last = coordinates.last;

  var items = [];
  var firstNavIsBeingShown = false;
  var lastNavIsBeingShown = false;

  for (var i = start; i <= end; i += 1) {
    items.push({ key: i, label: i, enabled: current !== i, page: i });
    if (i === first) firstNavIsBeingShown = true;
    if (i === last) lastNavIsBeingShown = true;
  }

  logic3dots(firstNavIsBeingShown, lastNavIsBeingShown, items, current, first, last);
  setPreviousAndNextNavs(items, i18n, current, first, last);
  return _react2.default.createElement(
    'ul',
    { className: 'vn-pagination__navigation' },
    items.map(function (item) {
      return _react2.default.createElement(NavigationItem, {
        id: item.key,
        label: item.label,
        enabled: item.enabled,
        page: item.page,
        handleClick: handleClick
      });
    })
  );
};

Navigation.propTypes = {
  coordinates: _propTypes2.default.shape({
    first: _propTypes2.default.number.isRequired,
    start: _propTypes2.default.number.isRequired,
    current: _propTypes2.default.number.isRequired,
    end: _propTypes2.default.number.isRequired,
    last: _propTypes2.default.number.isRequired
  }).isRequired,
  i18n: _propTypes2.default.shape({
    next: _propTypes2.default.string.isRequired,
    previous: _propTypes2.default.string.isRequired
  }),
  onPaginate: _propTypes2.default.func
};

var getCoordinates = function getCoordinates(_ref3) {
  var currentPage = _ref3.currentPage,
      pageLinksToRender = _ref3.pageLinksToRender,
      pageSize = _ref3.pageSize,
      totalItems = _ref3.totalItems;

  var firstPage = 1;
  var lastPage = parseInt((totalItems - 1) / pageSize, 10) + 1;
  var middlePage = parseInt(pageLinksToRender / 2, 10);
  var diffLastPage = middlePage - Math.min(middlePage, lastPage - currentPage);
  var diffFirstPage = currentPage - middlePage - diffLastPage;
  var startPage = Math.max(1, diffFirstPage);
  var endPage = Math.min(lastPage, startPage + (pageLinksToRender - 1));
  var startItem = Math.max((currentPage - 1) * pageSize + 1, 0);
  var endItem = Math.min(currentPage * pageSize, totalItems);

  return {
    page: {
      first: firstPage,
      start: startPage,
      current: currentPage,
      end: endPage,
      last: lastPage
    },
    item: {
      start: startItem,
      end: endItem,
      last: totalItems
    }
  };
};

var Pagination = function Pagination(props) {
  return _react2.default.createElement(
    'div',
    { className: 'vn-pagination' },
    _react2.default.createElement(Information, _extends({ coordinates: getCoordinates(props).item }, props)),
    _react2.default.createElement(Navigation, _extends({ coordinates: getCoordinates(props).page }, props))
  );
};

Pagination.propTypes = {
  currentPage: _propTypes2.default.number.isRequired,
  i18n: _propTypes2.default.shape({
    changePageSize: _propTypes2.default.string.isRequired,
    showing: _propTypes2.default.string.isRequired,
    showingPosition: _propTypes2.default.oneOf(['before', 'after']),
    information: _propTypes2.default.string.isRequired,
    next: _propTypes2.default.string.isRequired,
    previous: _propTypes2.default.string.isRequired
  }),
  onChangePageSize: _propTypes2.default.func,
  onPaginate: _propTypes2.default.func,
  pageSize: _propTypes2.default.number,
  pageSizeOptions: _propTypes2.default.arrayOf(_propTypes2.default.number),
  pageLinksToRender: _propTypes2.default.number,
  totalItems: _propTypes2.default.number.isRequired
};

Pagination.defaultProps = {
  i18n: {
    changePageSize: 'Change page size',
    showing: 'Showing',
    showingPosition: 'before',
    information: '%{start} - %{end} of %{total}',
    next: 'Next',
    previous: 'Previous'
  },
  pageSize: 25,
  pageSizeOptions: [25, 50, 100],
  pageLinksToRender: defaultPageLinksToRender
};

Pagination.displayName = 'Pagination';

exports.default = Pagination;