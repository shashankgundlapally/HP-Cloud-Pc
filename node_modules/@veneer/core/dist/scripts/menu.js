'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuItem = exports.Menu = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('../css/menu.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MenuItem = function MenuItem(_ref) {
  var disabled = _ref.disabled,
      href = _ref.href,
      icon = _ref.icon,
      label = _ref.label,
      onClick = _ref.onClick,
      selected = _ref.selected,
      value = _ref.value;

  var renderedIcon = icon && _react2.default.createElement(_icon2.default, { name: icon, className: 'vn-menu__item-icon' });
  var itemClassNames = (0, _classnames2.default)({
    'vn-menu__item': true,
    'vn-menu__item--disabled': disabled
  });
  var linkClassNames = (0, _classnames2.default)({
    'vn-menu__item-link': true,
    'vn-menu__item-link--disabled': disabled,
    'vn-menu__item-link--selected': selected
  });
  var aProps = href ? { href: href } : {};
  var handleClick = function handleClick(event) {
    if (disabled) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    onClick(event, value);
  };

  var handleKeyDown = function handleKeyDown(event) {
    var father = event.target.parentNode.parentNode;
    switch (event.keyCode) {
      case 32: // SPACE
      case 38:
        // UP
        for (var i = 0; i < father.children.length; i += 1) {
          if (father.children[i].contains(event.target)) {
            if (i !== 0) {
              father.children[i - 1].children[0].focus();
            }
          }
        }
        return;
      case 40:
        // Down
        for (var _i = 0; _i < father.children.length - 1; _i += 1) {
          if (father.children[_i].contains(event.target)) {
            if (_i !== father.children.length - 1) {
              father.children[_i + 1].children[0].focus();
            }
          }
        }
        return;
      case 13:
        // ENTER
        if (disabled) {
          event.preventDefault();
          event.stopPropagation();
          break;
        }
        onClick(event, value);
        break;
      default:
        break;
    }
  };

  return _react2.default.createElement(
    'li',
    { className: itemClassNames },
    _react2.default.createElement(
      'a',
      _extends({}, aProps, {
        className: linkClassNames,
        onClick: handleClick,
        onKeyDown: handleKeyDown,
        role: 'menuitem',
        tabIndex: 0
      }),
      renderedIcon,
      _react2.default.createElement(
        'span',
        { className: 'vn-menu__item-label' },
        label
      )
    )
  );
};

MenuItem.propTypes = {
  disabled: _propTypes2.default.bool,
  href: _propTypes2.default.string,
  icon: _propTypes2.default.string,
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  onClick: _propTypes2.default.func,
  selected: _propTypes2.default.bool,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

MenuItem.defaultProps = {
  disabled: false,
  href: null,
  icon: null,
  label: '',
  onClick: function onClick() {},
  selected: false,
  value: null
};

MenuItem.displayName = 'MenuItem';

var Menu = function Menu(props) {
  var className = (0, _classnames2.default)(_defineProperty({
    'vn-menu': true
  }, props.className, props.className !== undefined));
  return _react2.default.createElement(
    'ul',
    { className: className },
    props.children
  );
};

Menu.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string
};

Menu.defaultProps = {
  className: ''
};

Menu.displayName = 'Menu';

exports.Menu = Menu;
exports.MenuItem = MenuItem;