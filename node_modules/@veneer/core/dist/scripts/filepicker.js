'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../scripts/button');

var _button2 = _interopRequireDefault(_button);

require('../css/filepicker.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilePicker = function (_React$Component) {
  _inherits(FilePicker, _React$Component);

  function FilePicker(props) {
    _classCallCheck(this, FilePicker);

    var _this = _possibleConstructorReturn(this, (FilePicker.__proto__ || Object.getPrototypeOf(FilePicker)).call(this, props));

    _this.handleClick = function (event) {
      if (_this.fileInput) {
        _this.fileInput.click();
      }
      if (_this.props.onClick) {
        _this.props.onClick(event);
      }
    };

    _this.handleChange = function (event) {
      var names = _this.getPlaceholder();
      var filenames = [];
      var files = event.target.files;
      for (var i = 0; i < files.length; i += 1) {
        filenames.push(files[i].name.toLowerCase());
      }

      if (filenames.length !== 0) {
        names = filenames.join(', ');
      }

      var selectedFiles = event.target.files;
      if (_this.props.accept !== '*.*') {
        var accepts = _this.props.accept.toLowerCase().split(',');
        var validfiles = filenames.map(function (filename) {
          var fileSplited = filename.split('.');
          return accepts.indexOf('.' + fileSplited[fileSplited.length - 1]);
        });
        if (validfiles.indexOf(-1) !== -1) names = '';
        if (names === '') selectedFiles = [];
      }

      _this.setState({ value: names });
      if (_this.props.onChange) {
        _this.props.onChange(event, selectedFiles);
      }
    };

    _this.handleFocusIn = function (event) {
      _this.setState({ focused: true });
      if (_this.props.onFocusIn) {
        _this.props.onFocusIn(event);
      }
    };

    _this.handleFocusOut = function (event) {
      _this.setState({ focused: false });
      if (_this.props.onFocusOut) {
        _this.props.onFocusOut(event);
      }
    };

    _this.handleMouseOver = function (event) {
      _this.setState({ hover: true });
      if (_this.props.onMouseOver) {
        _this.props.onMouseOver(event);
      }
    };

    _this.handleMouseOut = function (event) {
      _this.setState({ hover: false });
      if (_this.props.onMouseOut) {
        _this.props.onMouseOut(event);
      }
    };

    _this.state = {
      focused: false,
      hover: false,
      value: null,
      errorMessage: props.errorMessage
    };
    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleFocusIn = _this.handleFocusIn.bind(_this);
    _this.handleFocusOut = _this.handleFocusOut.bind(_this);
    _this.handleMouseOver = _this.handleMouseOver.bind(_this);
    _this.handleMouseOut = _this.handleMouseOut.bind(_this);
    _this.getPlaceholder = _this.getPlaceholder.bind(_this);
    return _this;
  }

  _createClass(FilePicker, [{
    key: 'getPlaceholder',
    value: function getPlaceholder() {
      var PLACEHOLDER = _react2.default.createElement(
        'span',
        { className: 'vn-filepicker__placeholder' },
        this.props.placeholder
      );
      return this.props.placeholder ? PLACEHOLDER : '';
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var error = this.props.error;
      var classes = {
        'vn-filepicker': true,
        'vn-filepicker--expanded': true
      };

      if (this.props.className) {
        classes[this.props.className] = true;
      }

      var divClasses = (0, _classnames2.default)({
        'vn-filepicker__file-name': true,
        'vn-filepicker__file-name--focused': this.state.focused,
        'vn-filepicker__file-name--no-focused': !this.state.focused,
        'vn-filepicker__file-name--hover': this.state.hover,
        'vn-filepicker__file-name--no-hover': !this.state.hover,
        'vn-filepicker__file-name--disabled': this.props.disabled,
        'vn-filepicker__file-name--error': error
      });

      var placeholder = this.getPlaceholder();
      var text = this.state.value ? this.state.value : placeholder;

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)(classes) },
        _react2.default.createElement(
          'a',
          {
            className: 'vn-filepicker__link',
            onClick: this.handleClick,
            onFocus: this.handleFocusIn,
            onBlur: this.handleFocusOut,
            onMouseOver: this.handleMouseOver,
            onMouseOut: this.handleMouseOut,
            role: 'none'
          },
          _react2.default.createElement(
            'div',
            { className: divClasses, title: this.state.value },
            text
          ),
          _react2.default.createElement(
            _button2.default,
            {
              type: 'button',
              disabled: this.props.disabled
            },
            this.props.i18n.browse
          ),
          _react2.default.createElement('input', {
            accept: this.props.accept,
            className: 'vn-filepicker__input-file',
            disabled: this.props.disabled,
            multiple: this.props.multiple,
            name: this.props.name,
            onChange: this.handleChange,
            type: 'file',
            ref: function ref(input) {
              _this2.fileInput = input;
            }
          })
        )
      );
    }
  }]);

  return FilePicker;
}(_react2.default.Component);

FilePicker.propTypes = {
  accept: _propTypes2.default.string,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  errorMessage: _propTypes2.default.string,
  i18n: _propTypes2.default.shape({
    browse: _propTypes2.default.string.isRequired
  }),
  multiple: _propTypes2.default.bool,
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  onClick: _propTypes2.default.func,
  onFocusIn: _propTypes2.default.func,
  onFocusOut: _propTypes2.default.func,
  onMouseOver: _propTypes2.default.func,
  onMouseOut: _propTypes2.default.func,
  placeholder: _propTypes2.default.string
};

FilePicker.defaultProps = {
  accept: '*.*',
  className: '',
  disabled: false,
  error: false,
  errorMessage: '',
  i18n: {
    browse: 'BROWSE'
  },
  multiple: false,
  onChange: null,
  onClick: null,
  onFocusIn: null,
  onFocusOut: null,
  onMouseOver: null,
  onMouseOut: null,
  placeholder: ''
};

FilePicker.displayName = 'FilePicker';

exports.default = FilePicker;