'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('string.prototype.startswith');

var _debounce = require('./debounce');

var _debounce2 = _interopRequireDefault(_debounce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KeyPressOptionsHandler = function KeyPressOptionsHandler(options, callback) {
  var _this = this;

  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;

  _classCallCheck(this, KeyPressOptionsHandler);

  this.isBufferEmpty = function () {
    return _this.keyBuffer.length === 0;
  };

  this.isRepeating = function (key) {
    return _this.keyBuffer[_this.keyBuffer.length - 1] === key;
  };

  this.enterIteratingMode = function () {
    if (!_this.iteratingMode) {
      _this.iteratingMode = true;
      _this.iteratingCounter = 0;
      var s = _this.keyBuffer.join('').toLowerCase();
      _this.iteratingModeOptions = _this.options.filter(function (o) {
        return o.name.startsWith(s) && o.disabled === false;
      });
    }
  };

  this.leaveIteratingMode = function () {
    if (_this.iteratingMode) {
      _this.iteratingMode = false;
      _this.iteratingCounter = 0;
      _this.keyBuffer.splice(0, _this.keyBuffer.length - 1);
    }
  };

  this.find = function () {
    var s = _this.keyBuffer.join('').toLowerCase();
    return _this.options.findIndex(function (o) {
      return o.name.startsWith(s) && o.disabled === false;
    });
  };

  this.findInIteratingMode = function () {
    var c = _this.iteratingModeOptions.length;
    if (c === 0) {
      return -1;
    }
    _this.iteratingCounter += 1;
    return _this.iteratingModeOptions[_this.iteratingCounter % c].index;
  };

  this.invokeCallback = function (args) {
    if (_this.callback) _this.callback(args);
  };

  this.handle = function (key) {
    if (_this.isBufferEmpty()) {
      // single key pressed, find the first option that starts with this key
      _this.keyBuffer.push(key);
      _this.invokeCallback(_this.find());
    } else if (_this.isRepeating(key)) {
      // key pressed repeatedly ('a', 'a', ...), iterate over options starting with 'a'
      _this.enterIteratingMode();
      _this.invokeCallback(_this.findInIteratingMode());
    } else {
      // different keys pressed in a short time, find first option that starts with this sequence
      _this.leaveIteratingMode();
      _this.keyBuffer.push(key);
      _this.invokeCallback(_this.find());
      _this.clearKeyBuffer();
    }
  };

  this.options = options ? options.map(function (o, i) {
    return {
      name: String(o.label || o.value).toLowerCase(),
      disabled: o.disabled ? o.disabled : false,
      index: i
    };
  }) : [];
  this.callback = callback;
  this.delay = delay;
  this.keyBuffer = [];
  this.iteratingCounter = 0;
  this.iteratingMode = false;
  this.iteratingModeOptions = [];
  this.clearKeyBuffer = (0, _debounce2.default)(function () {
    _this.keyBuffer = [];
  }, this.delay);
};

exports.default = KeyPressOptionsHandler;