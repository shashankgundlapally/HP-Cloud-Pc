'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('../css/slider.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_React$Component) {
  _inherits(Slider, _React$Component);

  _createClass(Slider, null, [{
    key: 'circlePositionValue',
    value: function circlePositionValue(value, containerWidth) {
      var circleRadius = 12 * 100;
      return value - circleRadius / containerWidth;
    }
  }]);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    _this.handleWheel = function (event) {
      if (_this.state.disabled) {
        return;
      }

      var rect = _this.getContainerRect();
      var position = _this.state.value;

      position = event.deltaY > 0 ? position - 2 : position + 2;

      if (position > 100) {
        position = 100;
      }

      if (position < 0) {
        position = 0;
      }

      _this.setState({
        value: position,
        circlePosition: Slider.circlePositionValue(position, rect.width)
      }, function () {
        return _this.props.onChange(_this.state.value);
      });

      event.preventDefault();
    };

    _this.handleClick = function (event) {
      if (_this.state.disabled) {
        return;
      }

      var rect = _this.getContainerRect();
      var clientX = event.type !== 'touchmove' ? event.clientX : event.changedTouches[0].clientX;
      var ratio = (clientX - rect.left) / rect.width;

      if (ratio > 1) {
        ratio = 1;
      }
      if (ratio < 0) {
        ratio = 0;
      }

      var position = Math.round(100 * ratio);

      _this.setState({
        value: position,
        circlePosition: Slider.circlePositionValue(position, rect.width)
      }, function () {
        return _this.props.onChange(_this.state.value);
      });
    };

    _this.state = {
      value: _this.props.value,
      movementStarted: false,
      disabled: _this.props.disabled
    };

    _this.handleMovementStart = _this.handleMovementStart.bind(_this);
    _this.handleMovementStop = _this.handleMovementStop.bind(_this);
    return _this;
  }

  _createClass(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var rect = this.getContainerRect();
      /* eslint-disable react/no-did-mount-set-state */
      /* This is being disabled according to the comments in
      https://github.com/yannickcr/eslint-plugin-react/issues/596
      and as this still a default in airbnb library
      */
      this.setState({
        circlePosition: Slider.circlePositionValue(this.state.value, rect.width)
      });
    }
  }, {
    key: 'getContainerRect',
    value: function getContainerRect() {
      return this.container.getBoundingClientRect();
    }
  }, {
    key: 'handleMovementStart',
    value: function handleMovementStart(event) {
      this.setState({
        movementStarted: true
      });

      if (event.type === 'mousedown') {
        document.addEventListener('mousemove', this.handleClick);
        document.addEventListener('mouseup', this.handleMovementStop);
      }
      if (event.type === 'touchstart') {
        document.addEventListener('touchmove', this.handleClick);
        document.addEventListener('touchend', this.handleMovementStop);
      }

      // Cancel text selection
      event.preventDefault();
    }
  }, {
    key: 'handleMovementStop',
    value: function handleMovementStop(event) {
      this.setState({
        movementStarted: false
      });

      if (event.type === 'mouseup') {
        document.removeEventListener('mousemove', this.handleClick);
        document.removeEventListener('mouseup', this.handleMovementStop);
      }
      if (event.type === 'touchend') {
        document.removeEventListener('touchmove', this.handleClick);
        document.removeEventListener('touchend', this.handleMovementStop);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var slider = {
        'vn-slider': true
      };

      var sliderTrack = {
        'vn-slider__track': true,
        'vn-slider__track--disabled': this.state.disabled
      };

      var sliderTrackProgressClasses = {
        'vn-slider__track': true,
        'vn-slider__track--disabled': this.state.disabled,
        'vn-slider__progress': true,
        'vn-slider__progress--disabled': this.state.disabled
      };

      var sliderCircleClasses = {
        'vn-slider__circle': true,
        'vn-slider__circle--on': this.state.movementStarted,
        'vn-slider__circle--disabled': this.state.disabled
      };

      if (this.props.className) {
        slider[this.props.className] = true;
      }

      return _react2.default.createElement(
        'div',
        _extends({}, this.props, {
          role: 'slider',
          tabIndex: 0,
          'aria-valuenow': this.state.value,
          'aria-valuemax': 100,
          'aria-valuemin': 0,
          ref: function ref(c) {
            _this2.container = c;
          },
          className: (0, _classnames2.default)(slider),
          onClick: this.handleClick,
          onWheel: this.handleWheel
        }),
        _react2.default.createElement('div', { className: (0, _classnames2.default)(sliderTrack) }),
        _react2.default.createElement('div', {
          className: (0, _classnames2.default)(sliderTrackProgressClasses),
          style: { width: this.state.value + '%' }
        }),
        _react2.default.createElement('div', {
          role: 'slider',
          tabIndex: 0,
          'aria-valuenow': this.state.value,
          'aria-valuemax': 100,
          'aria-valuemin': 0,
          className: (0, _classnames2.default)(sliderCircleClasses),
          onMouseDown: this.handleMovementStart,
          onTouchStart: this.handleMovementStart,
          style: { left: this.state.circlePosition + '%' }
        })
      );
    }
  }]);

  return Slider;
}(_react2.default.Component);

Slider.defaultProps = {
  className: '',
  value: 0,
  disabled: false,
  onChange: function onChange() {}
};

Slider.propTypes = {
  className: _propTypes2.default.string,
  value: _propTypes2.default.number,
  disabled: _propTypes2.default.bool,
  onChange: _propTypes2.default.func
};

Slider.displayName = 'Slider';

exports.default = Slider;