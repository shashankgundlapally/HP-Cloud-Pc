'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _checkbox = require('./checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

require('../css/multiple_options.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultipleSelectOptions = function (_React$Component) {
  _inherits(MultipleSelectOptions, _React$Component);

  function MultipleSelectOptions(props) {
    _classCallCheck(this, MultipleSelectOptions);

    var _this = _possibleConstructorReturn(this, (MultipleSelectOptions.__proto__ || Object.getPrototypeOf(MultipleSelectOptions)).call(this, props));

    _initialiseProps.call(_this);

    var options = props.options,
        visibleOptions = props.visibleOptions;

    var optionsHeight = _this.calcOptionsHeight(visibleOptions, options.length);

    _this.state = {
      optionsHeight: optionsHeight
    };
    return _this;
  }

  _createClass(MultipleSelectOptions, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          highlightedIndex = _props.highlightedIndex,
          highlightedRef = _props.highlightedRef,
          _onKeyPress = _props.onKeyPress,
          options = _props.options;
      var optionsHeight = this.state.optionsHeight;


      var optionsClasses = (0, _classnames2.default)({
        'vn-multiple_options': true,
        'vn-multiple_options--error': this.props.error,
        'vn-multiple_options--upwards': this.props.optionsOrientation.includes('up'),
        'vn-multiple_options--right': this.props.optionsOrientation.includes('right')
      });

      return _react2.default.createElement(
        'div',
        { className: optionsClasses },
        _react2.default.createElement(
          'ul',
          { className: 'vn-multiple_options--scroll', style: { height: optionsHeight + 'px' } },
          options.map(function (option, index) {
            var spanClasses = {
              'vn-multiple_options__option': true,
              'vn-multiple_options__option--disabled': option.disabled
            };
            var liClasses = {
              'vn-multiple_options__li--disabled': option.disabled
            };
            return _react2.default.createElement(
              'li',
              { key: option.id, className: (0, _classnames2.default)(liClasses) },
              _react2.default.createElement(
                'span',
                {
                  className: (0, _classnames2.default)(spanClasses),
                  onClick: function onClick(e) {
                    return _this2.handleClick(e, index);
                  },
                  onKeyDown: function onKeyDown(e) {
                    return _this2.handleKeyDown(e, index);
                  },
                  onKeyPress: function onKeyPress(e) {
                    return _onKeyPress(e);
                  },
                  tabIndex: 0,
                  ref: highlightedIndex === index ? highlightedRef : undefined
                },
                _react2.default.createElement(_checkbox2.default, {
                  id: String(option.id),
                  checked: option.checked,
                  label: option.label || option.value,
                  name: option.label || option.value,
                  disabled: option.disabled
                })
              )
            );
          })
        )
      );
    }
  }]);

  return MultipleSelectOptions;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.calcOptionsHeight = function (visibleOptions, optionsLength) {
    var optionHeight = 34;
    var maxOptions = optionsLength;

    if (visibleOptions > maxOptions || visibleOptions <= 0) {
      return maxOptions * optionHeight;
    }
    return visibleOptions * optionHeight;
  };

  this.handleClick = function (event, index) {
    event.preventDefault();
    var options = _this3.props.options;

    var option = options[index];

    if (option.disabled) return;

    option.checked = !option.checked;

    if (_this3.props.onChange) {
      _this3.props.onChange(options);
    }
  };

  this.handleKeyDown = function (event, index) {
    var children = event.target.parentNode.parentNode.children;
    var nextIndex = index + 1;
    var previousIndex = index - 1;

    switch (event.keyCode) {
      case 38:
        // UP
        event.preventDefault();
        if (previousIndex >= 0) {
          children[previousIndex].firstChild.focus();
        }
        return;
      case 40:
        // Down
        event.preventDefault();
        if (nextIndex < children.length) {
          children[nextIndex].firstChild.focus();
        }
        return;
      case 32:
        // Spacebar
        event.stopPropagation();
        _this3.handleClick(event, index);
        break;
      default:
        _this3.props.onKeyDown(event);
        break;
    }
  };
};

MultipleSelectOptions.propTypes = {
  error: _propTypes2.default.bool,
  highlightedIndex: _propTypes2.default.number,
  highlightedRef: _propTypes2.default.func,
  onChange: _propTypes2.default.func.isRequired,
  onKeyDown: _propTypes2.default.func.isRequired,
  onKeyPress: _propTypes2.default.func.isRequired,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    checked: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    id: _propTypes2.default.number.isRequired,
    label: _propTypes2.default.string,
    value: _propTypes2.default.node.isRequired
  })).isRequired,
  optionsOrientation: _propTypes2.default.arrayOf(_propTypes2.default.string),
  visibleOptions: _propTypes2.default.number
};

MultipleSelectOptions.defaultProps = {
  error: false,
  highlightedIndex: undefined,
  highlightedRef: function highlightedRef() {},
  onClick: function onClick() {},
  onMouseDown: function onMouseDown() {},
  optionsOrientation: [],
  visibleOptions: 10
};

MultipleSelectOptions.displayName = 'MultipleSelectOptions';

exports.default = MultipleSelectOptions;