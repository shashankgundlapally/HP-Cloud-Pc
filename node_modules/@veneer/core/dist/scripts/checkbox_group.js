'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _checkbox = require('./checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

var _checkbox_states = require('./utils/checkbox_states');

var _checkbox_states2 = _interopRequireDefault(_checkbox_states);

require('../css/checkbox_group.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var itemsPropType = _propTypes2.default.arrayOf(_propTypes2.default.shape({
  checked: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  id: _propTypes2.default.number.isRequired,
  name: _propTypes2.default.string.isRequired,
  totalItems: _propTypes2.default.number,
  value: _propTypes2.default.node.isRequired,
  isExpanded: _propTypes2.default.bool
}));

var Label = function Label(_ref) {
  var name = _ref.name,
      totalItems = _ref.totalItems;
  return _react2.default.createElement(
    'span',
    { className: 'vn-checkbox_group__item-label' },
    _react2.default.createElement(
      'span',
      { className: 'vn-checkbox_group__item-label-text' },
      name,
      totalItems != null && _react2.default.createElement(
        'span',
        { className: 'vn-checkbox_group__item-label-text-total vn-checkbox_group__item-label-text-total' + (totalItems <= 0 ? '--disabled' : '') },
        '(' + totalItems + ')'
      )
    )
  );
};

Label.propTypes = {
  name: _propTypes2.default.node.isRequired,
  totalItems: _propTypes2.default.number
};

Label.defaultProps = {
  totalItems: null
};

var CheckboxGroup = function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  function CheckboxGroup(props) {
    _classCallCheck(this, CheckboxGroup);

    var _this = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call(this, props));

    _this.handleChange = function (changed) {
      var items = _this.state.items.map(function (item) {
        return _this.initializeItem(item, changed.target.id);
      });

      if (_this.props.onChange) {
        _this.props.onChange(items);
      }
    };

    _this.handleChangeCG = function (children) {
      var father = _this.state.items;
      father.forEach(function (item, index) {
        if (item.items != null) {
          if (item.items[0].id === children[0].id) {
            father[index].items = children;
            father[index].checked = undefined;
          }
        }
      });
      _this.props.onChange(father);
    };

    _this.handleClick = function (clicked) {
      var father = _this.state.items;
      father.forEach(function (item, index) {
        if (String('arrow' + item.id) === clicked.target.id) {
          var newItem = item;
          newItem.isExpanded = !item.isExpanded;
          father[index] = newItem;
          _this.setState({ items: father });
        }
      });
    };

    _this.state = {
      items: props.items
    };
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        items: nextProps.items
      });
    }
  }, {
    key: 'initializeItem',
    value: function initializeItem(item, id) {
      var _this2 = this;

      if (String(item.id) === id) {
        var _newItem = item;
        if (_newItem.checked === _checkbox_states2.default.checked || _newItem.checked === _checkbox_states2.default.indeterminated) {
          _newItem.checked = _checkbox_states2.default.unchecked;
        } else {
          _newItem.checked = _checkbox_states2.default.checked;
        }
        return _newItem;
      } else if (item.items == null) {
        return item;
      }

      var newItem = item;
      newItem.items = item.items.map(function (child) {
        var newChild = child;
        newChild = _this2.initializeItem(newChild);
        return newChild;
      });
      newItem.checked = undefined;
      return newItem;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'ul',
          null,
          this.state.items.map(function (item) {
            var disabled = false;
            if (item.totalItems <= 0) {
              disabled = true;
              if (_this3.props.hideEmpty === true) {
                return null;
              }
            }

            var arrowClasses = (0, _classnames2.default)({
              'vn-checkbox_group__item-arrow-icon': true,
              'vn-checkbox_group__item-arrow-icon--expanded': item.isExpanded
            });

            return _react2.default.createElement(
              'li',
              { className: 'vn-checkbox_group__item-li', key: item.id },
              _react2.default.createElement(
                'div',
                { className: 'vn-checkbox_group__item' },
                item.items != null ? _react2.default.createElement(
                  'div',
                  {
                    role: 'presentation',
                    style: { display: 'inline-block' },
                    id: 'arrow' + String(item.id),
                    onClick: _this3.handleClick
                  },
                  _react2.default.createElement(_icon2.default, {
                    style: { 'pointer-events': 'none' },
                    className: arrowClasses,
                    name: 'arrow'
                  })
                ) : _react2.default.createElement('div', { style: { display: 'inline', marginRight: '15px' } }),
                _react2.default.createElement(
                  'div',
                  { className: 'vn-checkbox_group__item-div' },
                  _react2.default.createElement(_checkbox2.default, {
                    id: String(item.id),
                    checked: _checkbox_states2.default[item.checked],
                    label: _react2.default.createElement(Label, item),
                    name: item.name,
                    onChange: _this3.handleChange,
                    disabled: disabled
                  })
                )
              ),
              item.items != null && item.isExpanded && _react2.default.createElement(
                'div',
                { style: { marginLeft: '20px' } },
                _react2.default.createElement(CheckboxGroup, {
                  items: item.items,
                  onChange: _this3.handleChangeCG
                })
              )
            );
          }, this)
        )
      );
    }
  }]);

  return CheckboxGroup;
}(_react2.default.Component);

CheckboxGroup.propTypes = {
  hideEmpty: _propTypes2.default.bool,
  items: itemsPropType.isRequired,
  onChange: _propTypes2.default.func.isRequired
};

CheckboxGroup.defaultProps = {
  hideEmpty: false,
  isExpanded: false
};

CheckboxGroup.displayName = 'CheckboxGroup';

exports.default = CheckboxGroup;