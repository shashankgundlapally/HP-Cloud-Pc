'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('../css/panel.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Panel = function (_React$Component) {
  _inherits(Panel, _React$Component);

  function Panel(props) {
    _classCallCheck(this, Panel);

    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

    _this.handleVisibility = function (event) {
      event.preventDefault();

      _this.setState({
        collapsed: !_this.state.collapsed
      });
    };

    _this.state = {
      collapsed: props.collapsed
    };
    return _this;
  }

  _createClass(Panel, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          className = _props.className,
          collapsible = _props.collapsible,
          collapsed = _props.collapsed,
          contentClassName = _props.contentClassName,
          hoverable = _props.hoverable,
          shadow = _props.shadow,
          children = _props.children,
          others = _objectWithoutProperties(_props, ['title', 'className', 'collapsible', 'collapsed', 'contentClassName', 'hoverable', 'shadow', 'children']);

      var header = void 0;

      if (typeof title !== 'undefined' || collapsible) {
        var headerClasses = { 'vn-panel__header': true };
        if (collapsible) {
          var iconClasses = (0, _classnames2.default)({
            'vn-panel__toggle-icon': true,
            'vn-panel__toggle-icon--collapsed': this.state.collapsed === true
          });
          headerClasses['vn-panel__collapsible-header'] = true;
          headerClasses['vn-panel__collapsible-header--collapsed'] = this.state.collapsed === true;
          header = _react2.default.createElement(
            'a',
            {
              className: (0, _classnames2.default)(headerClasses),
              href: null,
              onClick: this.handleVisibility
            },
            _react2.default.createElement(
              'h6',
              { className: 'vn-panel__title' },
              title,
              _react2.default.createElement(_icon2.default, { className: iconClasses, name: 'arrow', color: 'black' })
            )
          );
        } else {
          header = _react2.default.createElement(
            'div',
            { className: (0, _classnames2.default)(headerClasses) },
            _react2.default.createElement(
              'h6',
              { className: 'vn-panel__title' },
              title
            )
          );
        }
      }

      var contentClasses = _defineProperty({
        'vn-panel__content': true,
        'vn-panel__content--collapsed': this.state.collapsed === true
      }, contentClassName, contentClassName !== undefined);

      var panelClasses = _defineProperty({
        'vn-panel': true,
        'vn-panel--shadow': shadow,
        'vn-panel__hoverable': hoverable === true
      }, className, className !== undefined);

      return _react2.default.createElement(
        'div',
        _extends({}, others, { className: (0, _classnames2.default)(panelClasses) }),
        header,
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)(contentClasses) },
          children
        )
      );
    }
  }]);

  return Panel;
}(_react2.default.Component);

Panel.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  collapsible: _propTypes2.default.bool,
  collapsed: _propTypes2.default.bool,
  contentClassName: _propTypes2.default.string,
  hoverable: _propTypes2.default.bool,
  shadow: _propTypes2.default.bool,
  title: _propTypes2.default.string
};

Panel.defaultProps = {
  className: undefined,
  collapsible: false,
  collapsed: false,
  contentClassName: undefined,
  hoverable: false,
  shadow: false,
  title: undefined
};

Panel.displayName = 'Panel';

exports.default = Panel;