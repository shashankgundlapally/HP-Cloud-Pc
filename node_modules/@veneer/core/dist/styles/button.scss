@import 'utils/mixins';
@import 'utils/variables';

.vn-button {
  @include border-radius(3px);
  @include box-sizing(border-box);
  @include appearance(none);
  background-color: $blue;
  border: $button-border-width solid $blue;
  color: $white;
  cursor: pointer;
  display: inline-block;
  font: {
    family: $font-family-regular;
    size: $font-size-lg;
  }
  height: $button-height;
  line-height: $button-line-height;
  min-width: $button-min-width;
  padding: $button-padding-y $button-padding-x;
  position: relative;
  text-align: center;
  text-transform: uppercase;
  transition: all .3s ease 0s;
  vertical-align: middle;
  white-space: nowrap;

  &:hover,
  &:focus {
    background-color: $blue-darker;
    border: $button-border-width solid $blue-darker;
    color: $white;
    text-decoration: none;
  }

  &:active {
    background-color: darken($blue-darker, $button-darkness-rate);
  }

  &--secondary {
    background-color: $white;
    border: $button-border-width solid $gray;
    color: $black;

    &:hover,
    &:focus {
      background-color: $gray-lighter;
      border: $button-border-width solid $gray;
      color: $black;
    }
    &:active {
      background-color: darken($gray-lighter, $button-darkness-rate);
    }
  }

  &--critical {
    background-color: $orange;
    border: $button-border-width solid $orange;

    &:hover,
    &:focus {
      background-color: $orange-dark;
      border: $button-border-width solid $orange-dark;
    }

    &:active {
      background-color: darken($orange-dark, $button-darkness-rate);
    }
  }

  &:disabled,
  &--disabled {
    background-color: $gray-lighter;
    border: $button-border-width solid $gray-lighter;
    color: $gray !important;
    cursor: default !important;
  }

  &:disabled.vn-button--loading {
    color: transparent !important;
  }

  &--expanded {
    width: 100%;
  }

  &--right {
    float: right;
  }
}

// Specificity overrides
// Not following BEM because the link class name shouldn't be too verbose
a.vn-button--disabled {
  pointer-events: none;
}

.vn-button-group {
  &--horizontal > .vn-button:not(:last-child) {
    margin-right: $space-md;
  }

  &--horizontal > .vn-button {
    margin: 1px 0;
  }

  &--vertical > .vn-button:not(:last-child) {
    display: block;
    margin-bottom: $space-md;
  }

  &--responsive {
    @media (min-width: $sm-min) {
      > .vn-button:not(:last-child) {
        margin-right: $space-md;
      }
    }
    @media (max-width: $xs-max) {
      width: 100%;

      > .vn-button {
        display: block;
        width: 100%;
      }

      > .vn-button:not(:last-child) {
        margin-bottom: $space-md;
      }
    }
  }
}

// button - loading
.vn-icon--loading {
  @include animation(fadein 1s, spin 1s steps(8, end) infinite);
  display: inline-block;
  left: calc(50% - 12px);
  position: absolute;
  top: calc(50% - 12px);
  z-index: 1;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}
