'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _highcharts = require('./utils/highcharts');

var _highcharts2 = _interopRequireDefault(_highcharts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorPalette = {
  categories: ['#51d7db', '#0eb0cb', '#0a8ebc', '#1f77ad', '#33609f', '#474990', '#4b387d', '#4c296c', '#372256', '#231b40', '#2f2456', '#452b6c', '#5f479f', '#074f80', '#5355a8', '#497abe', '#439cd2', '#40b9e3', '#4ccbea', '#7cdee7'],
  gray: ['#d0d0d0', '#959595', '#ececec', '#707070', '#e3e3e3', '#bababa', '#d9d9d9', '#f5f5f5', '#4b4b4b', '#d0d0d0', '#959595', '#ececec', '#707070', '#e3e3e3', '#bababa', '#d9d9d9', '#f5f5f5', '#4b4b4b', '#959595', '#ececec'],
  positive: '#8ac926',
  intermediary: '#ffca3a',
  negative: '#ff595e',
  highlight: '#e6734b'
};

var Chart = function (_Component) {
  _inherits(Chart, _Component);

  function Chart(props) {
    _classCallCheck(this, Chart);

    var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this, props));

    _this.setColors = function () {
      var colors = [];
      var _this$props = _this.props,
          theme = _this$props.theme,
          highlightIndex = _this$props.highlightIndex,
          positiveIndex = _this$props.positiveIndex,
          negativeIndex = _this$props.negativeIndex,
          intermediaryIndex = _this$props.intermediaryIndex;

      var specialIndexes = void 0;

      switch (theme) {
        case 'categories':
          colors = ColorPalette.categories;
          break;
        case 'highlight':
          colors = ColorPalette.gray.slice(0);
          colors.splice(highlightIndex, 0, ColorPalette.highlight);
          break;
        case 'feedback':
          colors = ColorPalette.gray.slice(0);
          specialIndexes = [positiveIndex, negativeIndex, intermediaryIndex];
          specialIndexes = specialIndexes.filter(function (specialIndex) {
            return specialIndex !== undefined;
          });
          specialIndexes.sort();
          for (var i = 0; i < specialIndexes.length; i += 1) {
            switch (specialIndexes[i]) {
              case positiveIndex:
                colors.splice(positiveIndex, 0, ColorPalette.positive);
                break;
              case intermediaryIndex:
                colors.splice(intermediaryIndex, 0, ColorPalette.intermediary);
                break;
              case negativeIndex:
                colors.splice(negativeIndex, 0, ColorPalette.negative);
                break;
              default:
                break;
            }
          }
          break;
        default:
          break;
      }
      return colors;
    };

    _this.state = {
      colors: _this.setColors()
    };

    _highcharts2.default.setOptions(_highcharts2.default.theme = {
      chart: {
        style: {
          fontFamily: '"HP Simplified Light", Arial, sans-serif'
        }
      },
      drilldown: {
        drillUpButton: {
          theme: {
            'stroke-width': 0,
            fill: 'transparent',
            states: {
              hover: {
                fill: 'transparent',
                style: {
                  textDecoration: 'underline'
                }
              }
            },
            style: {
              color: '#0096d6',
              fontFamily: '"HP Simplified", Arial, sans-serif',
              fontSize: '1rem',
              textDecoration: 'none',
              textTransform: 'uppercase'
            }
          }
        }
      }
    });
    return _this;
  }

  _createClass(Chart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var newOptions = _extends({
        colors: this.state.colors
      }, this.props.options);

      this.chart = new _highcharts2.default.Chart(this.container, newOptions);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var newOptions = _extends({
        colors: this.state.colors
      }, nextProps.options);
      this.chart.update(newOptions);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.chart.destroy();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement('div', { ref: function ref(c) {
          _this2.container = c;
        } });
    }
  }]);

  return Chart;
}(_react.Component);

Chart.propTypes = {
  options: _propTypes2.default.shape({
    chart: _propTypes2.default.object,
    title: _propTypes2.default.object,
    xAxis: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),
    yAxis: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),
    series: _propTypes2.default.array,
    legend: _propTypes2.default.object,
    plotOptions: _propTypes2.default.object,
    drilldown: _propTypes2.default.object
  }).isRequired,
  theme: _propTypes2.default.oneOf(['categories', 'highlight', 'feedback']),
  highlightIndex: _propTypes2.default.number,
  positiveIndex: _propTypes2.default.number,
  intermediaryIndex: _propTypes2.default.number,
  negativeIndex: _propTypes2.default.number
};

Chart.defaultProps = {
  theme: 'categories',
  highlightIndex: undefined,
  positiveIndex: undefined,
  intermediaryIndex: undefined,
  negativeIndex: undefined
};

Chart.displayName = 'Chart';

Chart.Highcharts = _highcharts2.default;

Chart.ColorPalette = ColorPalette;

exports.default = Chart;