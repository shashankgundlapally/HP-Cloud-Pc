'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _arrayPrototype = require('array.prototype.findindex');

var _arrayPrototype2 = _interopRequireDefault(_arrayPrototype);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _core = require('@veneer/core');

require('../css/multiselectcolumns.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_arrayPrototype2.default.shim();

var MultipleSelectColumms = function (_React$Component) {
  _inherits(MultipleSelectColumms, _React$Component);

  _createClass(MultipleSelectColumms, null, [{
    key: 'calcOptionsHeight',
    value: function calcOptionsHeight(visibleOptions, columnsLength) {
      var optionHeight = 34;
      var maxOptions = columnsLength;

      if (visibleOptions > maxOptions || visibleOptions <= 0) {
        return maxOptions * optionHeight;
      }
      return visibleOptions * optionHeight;
    }
  }]);

  function MultipleSelectColumms(props) {
    _classCallCheck(this, MultipleSelectColumms);

    var _this = _possibleConstructorReturn(this, (MultipleSelectColumms.__proto__ || Object.getPrototypeOf(MultipleSelectColumms)).call(this, props));

    _this.handleCheckbox = function (event, index) {
      event.stopPropagation();
      event.preventDefault();
      var _this$props = _this.props,
          columnsOrder = _this$props.columnsOrder,
          visibleColumns = _this$props.visibleColumns;

      var columnName = columnsOrder[index];
      var visibleIndex = visibleColumns.indexOf(columnName);

      if (visibleIndex === -1) {
        visibleColumns.push(columnName);
      } else {
        visibleColumns.splice(visibleIndex, 1);
      }

      _this.props.onChange(columnsOrder, visibleColumns);
    };

    _this.handleKeyDown = function (event) {
      var index = _this.state.selectedIndex;
      switch (event.keyCode) {
        case 38:
          // UP
          _this.handleSelect(event, _this.locateIndex(index, 'previous'));
          break;
        case 40:
          // Down
          _this.handleSelect(event, _this.locateIndex(index, 'next'));
          break;
        case 32:
          // SPACE
          event.stopPropagation();
          _this.handleCheckbox(event, index);
          break;
        default:
          break;
      }
    };

    _this.handleSelect = function (event, index) {
      event.stopPropagation();
      if (index !== _this.state.selectedIndex) {
        _this.setState({ selectedIndex: index });
      }
    };

    _this.handleSwap = function (event, direction) {
      event.stopPropagation();
      event.preventDefault();
      var _this$props2 = _this.props,
          columnsOrder = _this$props2.columnsOrder,
          visibleColumns = _this$props2.visibleColumns;

      var selectedIndex = _this.state.selectedIndex;
      var nextIndex = _this.locateIndex(selectedIndex, 'next');
      var previousIndex = _this.locateIndex(selectedIndex, 'previous');

      if (selectedIndex || selectedIndex === 0) {
        var temp = void 0;

        switch (direction) {
          case 'up':
            if (selectedIndex !== previousIndex) {
              temp = columnsOrder[selectedIndex];
              columnsOrder[selectedIndex] = columnsOrder[previousIndex];
              columnsOrder[previousIndex] = temp;
              selectedIndex = previousIndex;
            }
            break;
          case 'down':
            if (selectedIndex !== nextIndex) {
              temp = columnsOrder[selectedIndex];
              columnsOrder[selectedIndex] = columnsOrder[nextIndex];
              columnsOrder[nextIndex] = temp;
              selectedIndex = nextIndex;
            }
            break;
          default:
            break;
        }

        _this.handleSelect(event, selectedIndex);
        _this.props.onChange(columnsOrder, visibleColumns);
      }
    };

    _this.locateIndex = function (currentIndex, type) {
      var _this$props3 = _this.props,
          columns = _this$props3.columns,
          columnsOrder = _this$props3.columnsOrder;

      var operator = type === 'next' ? 1 : -1;
      var index = currentIndex + operator;

      while (index >= 0 && index < columnsOrder.length) {
        if (!('configurable' in columns[index]) || columns[index].configurable) {
          return index;
        }
        index += operator;
      }
      return currentIndex;
    };

    _this.state = {};
    return _this;
  }

  _createClass(MultipleSelectColumms, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var selectedIndex = this.state.selectedIndex;
      var _props = this.props,
          columns = _props.columns,
          columnsOrder = _props.columnsOrder,
          visibleColumns = _props.visibleColumns;


      return _react2.default.createElement(
        'div',
        null,
        this.props.i18n,
        _react2.default.createElement(
          'div',
          { className: 'vn-multiselect' },
          _react2.default.createElement(
            'div',
            { className: 'vn-multiselect__component' },
            _react2.default.createElement(
              'ul',
              {
                className: 'vn-multiselect__component--scroll',
                style: { height: MultipleSelectColumms.calcOptionsHeight(6, columns) + 'px' }
              },
              columnsOrder.map(function (columnName, index) {
                var liClasses = {
                  'vn-multiselect__component--li': true,
                  'vn-multiselect__component--li-selected': index === selectedIndex
                };
                var columnIndex = columns.findIndex(function (column) {
                  return column.column === columnName;
                });

                if (columnIndex === -1) {
                  return null;
                }

                var column = columns[columnIndex];

                if (!(column.configurable === undefined || column.configurable)) {
                  return null;
                }
                return _react2.default.createElement(
                  'li',
                  { key: columnName, className: (0, _classnames2.default)(liClasses) },
                  _react2.default.createElement(
                    'div',
                    {
                      role: 'button',
                      className: 'vn-multiselect__component--option',
                      onClick: function onClick(e) {
                        return _this2.handleSelect(e, index);
                      },
                      onKeyDown: function onKeyDown(e) {
                        return _this2.handleKeyDown(e);
                      },
                      tabIndex: 0
                    },
                    _react2.default.createElement(_core.Checkbox, {
                      id: String(columnName),
                      checked: visibleColumns.indexOf(columnName) !== -1,
                      label: column.title || column.column,
                      name: column.title || column.column,
                      onChange: function onChange(e) {
                        return _this2.handleCheckbox(e, index);
                      }
                    })
                  )
                );
              })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-multiselect__iconButton' },
            _react2.default.createElement(_core.IconButton, { name: 'up', icon: 'sort', onClick: function onClick(e) {
                return _this2.handleSwap(e, 'up');
              }, style: { transform: 'rotate(180deg)' } }),
            _react2.default.createElement(_core.IconButton, { name: 'down', icon: 'sort', onClick: function onClick(e) {
                return _this2.handleSwap(e, 'down');
              } })
          )
        )
      );
    }
  }]);

  return MultipleSelectColumms;
}(_react2.default.Component);

MultipleSelectColumms.propTypes = {
  columns: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    column: _propTypes2.default.string,
    configurable: _propTypes2.default.bool,
    title: _propTypes2.default.string,
    filter: _propTypes2.default.shape({
      type: _propTypes2.default.string,
      options: _propTypes2.default.arrayOf(_propTypes2.default.object)
    }),
    editable: _propTypes2.default.shape({
      type: _propTypes2.default.string,
      options: _propTypes2.default.arrayOf(_propTypes2.default.object)
    }),
    actionButton: _propTypes2.default.arrayOf(_propTypes2.default.object)
  })).isRequired,
  columnsOrder: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
  i18n: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  visibleColumns: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired
};

MultipleSelectColumms.defaultProps = {
  error: false,
  onClick: function onClick() {},
  onMouseDown: function onMouseDown() {},
  i18n: 'Available Columns'
};

MultipleSelectColumms.displayName = 'MultipleSelectColumms';

exports.default = MultipleSelectColumms;