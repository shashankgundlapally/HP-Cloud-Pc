'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _core = require('@veneer/core');

var _multiselectcolumns = require('./multiselectcolumns');

var _multiselectcolumns2 = _interopRequireDefault(_multiselectcolumns);

require('../css/tableconfiguration.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableConfiguration = function (_React$Component) {
  _inherits(TableConfiguration, _React$Component);

  function TableConfiguration(props) {
    _classCallCheck(this, TableConfiguration);

    var _this = _possibleConstructorReturn(this, (TableConfiguration.__proto__ || Object.getPrototypeOf(TableConfiguration)).call(this, props));

    _initialiseProps.call(_this);

    var columns = props.columns,
        preferences = props.preferences;


    _this.state = {
      showModal: false,
      preferences: _this.verifyPreferences(columns, preferences)
    };
    return _this;
  }

  _createClass(TableConfiguration, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var columns = nextProps.columns,
          preferences = nextProps.preferences;


      this.setState({
        preferences: this.verifyPreferences(columns, preferences)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          showModal = _state.showModal,
          preferences = _state.preferences;
      var _props = this.props,
          i18n = _props.i18n,
          columns = _props.columns;


      var modal = _react2.default.createElement(
        _core.Modal,
        {
          title: i18n.title,
          size: 'sm',
          onClose: this.handleDiscard,
          show: showModal
        },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            { className: 'vn-tableconfiguration__modal--showFilters' },
            i18n.toggle,
            _react2.default.createElement(
              'div',
              { className: 'vn-tableconfiguration__modal--showFilters-toggle' },
              _react2.default.createElement(_core.Toggle, { on: preferences.showFilters, onChange: this.handleToggle })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-tableconfiguration__modal--availableColumns' },
            _react2.default.createElement(_multiselectcolumns2.default, {
              columns: columns,
              columnsOrder: preferences.columnsOrder,
              i18n: i18n.available,
              onChange: this.handleMultiSelectChange,
              visibleColumns: preferences.visibleColumns
            })
          ),
          _react2.default.createElement(
            'div',
            { className: 'vn-tableconfiguration__modal--button' },
            _react2.default.createElement(
              _core.Button,
              { name: 'save', onClick: this.handleSave },
              i18n.saveButton
            ),
            _react2.default.createElement(
              _core.Button,
              { name: 'discard', onClick: this.handleDiscard, appearance: 'secondary' },
              i18n.discardButton
            )
          )
        )
      );

      return _react2.default.createElement(
        'div',
        { className: 'vn-tableconfiguration' },
        _react2.default.createElement(_core.IconButton, { icon: 'settings', onClick: this.handleModal, transparent: true }),
        modal
      );
    }
  }]);

  return TableConfiguration;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.handleModal = function () {
    _this2.setState({ showModal: true });
  };

  this.handleSave = function () {
    _this2.setState({ showModal: false });
    _this2.props.onChange(_this2.state.preferences);
  };

  this.handleDiscard = function () {
    _this2.setState({ showModal: false });
  };

  this.handleToggle = function (showFilters) {
    var preferences = _this2.state.preferences;
    preferences.showFilters = showFilters;
    _this2.setState({ preferences: preferences });
  };

  this.handleMultiSelectChange = function (columnsOrder, visibleColumns) {
    var preferences = _this2.state.preferences;
    preferences.columnsOrder = columnsOrder;
    preferences.visibleColumns = visibleColumns;
    _this2.setState({ preferences: preferences });
  };

  this.verifyPreferences = function (columns, preferences) {
    var verifiedPrefs = preferences;

    if (verifiedPrefs === undefined || verifiedPrefs === null) {
      verifiedPrefs = {};
    }

    if (verifiedPrefs.columnsOrder && verifiedPrefs.visibleColumns) {
      return verifiedPrefs;
    }

    if (verifiedPrefs.columnsOrder === undefined) {
      verifiedPrefs.columnsOrder = columns.map(function (column) {
        return column.column;
      });
    }

    if (verifiedPrefs.visibleColumns === undefined) {
      verifiedPrefs.visibleColumns = columns.filter(function (column) {
        return column.configurable === undefined || column.configurable;
      }).map(function (filteredColumn) {
        return filteredColumn.column;
      });
    }

    return verifiedPrefs;
  };
};

TableConfiguration.propTypes = {
  columns: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    column: _propTypes2.default.string.isRequired,
    configurable: _propTypes2.default.bool,
    title: _propTypes2.default.string
  })).isRequired,
  i18n: _propTypes2.default.shape({
    available: _propTypes2.default.string.isRequired,
    discardButton: _propTypes2.default.string.isRequired,
    saveButton: _propTypes2.default.string.isRequired,
    title: _propTypes2.default.string.isRequired,
    toggle: _propTypes2.default.string.isRequired
  }),
  onChange: _propTypes2.default.func.isRequired,
  preferences: _propTypes2.default.shape({
    columnsOrder: _propTypes2.default.arrayOf(_propTypes2.default.string),
    showFilters: _propTypes2.default.bool,
    sortBy: _propTypes2.default.shape({
      column: _propTypes2.default.string.isRequired,
      type: _propTypes2.default.oneOf(['ASC', 'DESC']).isRequired
    }),
    visibleColumns: _propTypes2.default.arrayOf(_propTypes2.default.string)
  }).isRequired
};

TableConfiguration.defaultProps = {
  i18n: {
    available: 'Available Columns',
    discardButton: 'Discard',
    saveButton: 'Save',
    title: 'Table Configuration',
    toggle: 'Show advanced filters'
  },
  onChange: function onChange() {}
};

TableConfiguration.displayName = 'TableConfiguration';

exports.default = TableConfiguration;