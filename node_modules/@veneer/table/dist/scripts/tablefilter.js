'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _core = require('@veneer/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableFilter = function (_React$Component) {
  _inherits(TableFilter, _React$Component);

  function TableFilter(props) {
    _classCallCheck(this, TableFilter);

    var _this = _possibleConstructorReturn(this, (TableFilter.__proto__ || Object.getPrototypeOf(TableFilter)).call(this, props));

    _this.onDropdownChange = function (value, column) {
      _this.setState({
        value: value
      }, _this.props.onChange(value, column));
    };

    _this.state = {
      value: ''
    };
    return _this;
  }

  _createClass(TableFilter, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          column = _props.column,
          component = _props.component,
          type = _props.type,
          options = _props.options,
          _onChange = _props.onChange;

      var filterComponent = void 0;

      switch (type) {
        case 'component':
          filterComponent = component;
          break;
        case 'dropdown':
          filterComponent = _react2.default.createElement(_core.Dropdown, {
            onChange: function onChange(value) {
              return _this2.onDropdownChange(value, column);
            },
            placeholder: 'All',
            options: options,
            value: this.state.value
          });
          break;
        case 'search':
          filterComponent = _react2.default.createElement(_core.Search, {
            onChange: function onChange(value) {
              return _onChange(value, column);
            }
          });
          break;
        default:
          break;
      }

      return _react2.default.createElement(
        'th',
        { className: 'vn-tableheader__cell vn-tableheader__filter-cell' },
        filterComponent
      );
    }
  }]);

  return TableFilter;
}(_react2.default.Component);

TableFilter.propTypes = {
  column: _propTypes2.default.string,
  component: function component(props, propName, componentName) {
    var prop = props[propName];
    if (prop && [_core.DatePicker, _core.Dropdown, _core.DropdownMultipleSelect, _core.Search].indexOf(prop.type) === -1) {
      return new Error('Invalid prop `component` of type `' + prop.type.displayName + '`\n      supplied to `' + componentName + '`, expected one of type `DatePicker`, `Dropdown`, \n      `DropdownMultipleSelect` or `Search`.');
    }
    return undefined;
  },
  onChange: _propTypes2.default.func,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    icon: _propTypes2.default.string,
    label: _propTypes2.default.string,
    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
  })),
  type: _propTypes2.default.oneOf(['component', 'dropdown', 'none', 'search'])
};

TableFilter.defaultProps = {
  column: undefined,
  component: undefined,
  onChange: function onChange() {},
  options: [],
  type: 'none'
};

TableFilter.displayName = 'TableFilter';

exports.default = TableFilter;