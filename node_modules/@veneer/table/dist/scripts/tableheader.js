'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _arrayPrototype = require('array.prototype.findindex');

var _arrayPrototype2 = _interopRequireDefault(_arrayPrototype);

var _core = require('@veneer/core');

var _tablefilter = require('./tablefilter');

var _tablefilter2 = _interopRequireDefault(_tablefilter);

var _tabletitle = require('./tabletitle');

var _tabletitle2 = _interopRequireDefault(_tabletitle);

require('../css/tableheader.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_arrayPrototype2.default.shim();

var TableHeader = function (_React$Component) {
  _inherits(TableHeader, _React$Component);

  function TableHeader(props) {
    _classCallCheck(this, TableHeader);

    var _this = _possibleConstructorReturn(this, (TableHeader.__proto__ || Object.getPrototypeOf(TableHeader)).call(this, props));

    _this.onSort = function (column, sortType) {
      var type = void 0;

      switch (sortType) {
        case 'ASC':
          type = 'DESC';
          break;
        default:
          type = 'ASC';
          break;
      }
      var sortBy = { column: column, type: type };

      _this.setState({ sortBy: sortBy }, function () {
        return _this.props.onSort(sortBy);
      });
    };

    _this.onFilter = function (value, column) {
      var columnsFilter = _this.state.columnsFilter;

      var newColumnFilter = { column: column, filterValue: value };

      columnsFilter = columnsFilter.filter(function (columnFilter) {
        return columnFilter.column !== column;
      });
      if (value) {
        columnsFilter.push(newColumnFilter);
      }
      _this.setState({ columnsFilter: columnsFilter }, function () {
        return _this.props.onFilter(columnsFilter);
      });
    };

    _this.onSelectAllItems = function () {
      _this.props.onSelectAllItems(!_this.props.selectAllItems);
    };

    _this.onSelectAllPage = function () {
      _this.props.onSelectAllPage(!_this.props.selectAllPage);
    };

    _this.state = {
      columnsFilter: [],
      sortBy: props.sortBy
    };
    return _this;
  }

  _createClass(TableHeader, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          columnsOrder = _props.columnsOrder,
          config = _props.config,
          i18n = _props.i18n,
          loading = _props.loading,
          numberOfPageItems = _props.numberOfPageItems,
          onSelectAllItems = _props.onSelectAllItems,
          onSort = _props.onSort,
          selectAllItems = _props.selectAllItems,
          selectAllPage = _props.selectAllPage,
          selectionColumn = _props.selectionColumn,
          showFilters = _props.showFilters,
          totalItems = _props.totalItems;
      var sortBy = this.state.sortBy;


      var selectAllPageText = i18n.allPageSelected.replace('%{numberOfPageItems}', numberOfPageItems);
      var selectAllItemsText = i18n.selectAllItems.replace('%{totalItems}', totalItems);
      var allItemsSelected = i18n.allItemsSelected.replace('%{totalItems}', totalItems);
      var clearSelection = i18n.clearSelection;

      return _react2.default.createElement(
        'thead',
        { className: 'vn-tableheader' },
        _react2.default.createElement(
          'tr',
          { className: 'vn-tableheader__row' },
          selectionColumn && _react2.default.createElement(
            'th',
            { className: 'vn-tableheader__cell vn-tableheader__select-page-cell' },
            _react2.default.createElement(_core.Checkbox, {
              name: 'SelectAllPage',
              onClick: this.onSelectAllPage,
              checked: selectAllPage,
              disabled: numberOfPageItems === 0 || loading
            })
          ),
          columnsOrder.map(function (columnName) {
            var columnIndex = config.findIndex(function (column) {
              return column.column === columnName;
            });
            var sortType = 'none';

            if (columnIndex !== -1) {
              var column = config[columnIndex];

              if (sortBy && sortBy.column === columnName) {
                sortType = sortBy.type;
              }

              return _react2.default.createElement(_tabletitle2.default, {
                key: columnName,
                column: columnName,
                disabled: loading,
                label: column.title,
                sort: sortType,
                sortable: column.sortable,
                onChange: onSort ? _this2.onSort : undefined,
                width: column.width
              });
            }
            return null;
          })
        ),
        showFilters && _react2.default.createElement(
          'tr',
          { className: 'vn-tableheader__row' },
          selectionColumn && _react2.default.createElement('th', { className: 'vn-tableheader__cell' }),
          columnsOrder.map(function (columnName) {
            var columnIndex = config.findIndex(function (column) {
              return column.column === columnName;
            });
            if (columnIndex !== -1) {
              var column = config[columnIndex];
              var filter = column.filter;
              if (filter) {
                return _react2.default.createElement(_tablefilter2.default, {
                  key: column.column,
                  column: column.column,
                  component: filter.component,
                  type: filter.type,
                  options: filter.options,
                  onChange: _this2.onFilter
                });
              }
              return _react2.default.createElement('th', { key: column.column, className: 'vn-tableheader__cell' });
            }
            return null;
          })
        ),
        onSelectAllItems && totalItems > numberOfPageItems && selectAllPage && !selectAllItems && !loading && _react2.default.createElement(
          'tr',
          { className: 'vn-tableheader__row' },
          _react2.default.createElement(
            'th',
            { colSpan: this.props.config.length + 1, className: 'vn-tableheader__cell vn-tableheader__select-all-cell' },
            _react2.default.createElement(
              'span',
              null,
              ' ',
              selectAllPageText,
              ' '
            ),
            _react2.default.createElement(
              'a',
              { onClick: this.onSelectAllItems },
              ' ',
              selectAllItemsText,
              ' '
            )
          )
        ),
        onSelectAllItems && totalItems > numberOfPageItems && selectAllItems && !loading && _react2.default.createElement(
          'tr',
          { className: 'vn-tableheader__row' },
          _react2.default.createElement(
            'th',
            { colSpan: this.props.config.length + 1, className: 'vn-tableheader__cell vn-tableheader__select-all-cell' },
            _react2.default.createElement(
              'span',
              null,
              ' ',
              allItemsSelected,
              ' '
            ),
            _react2.default.createElement(
              'a',
              { onClick: this.onSelectAllItems },
              ' ',
              clearSelection,
              ' '
            )
          )
        )
      );
    }
  }]);

  return TableHeader;
}(_react2.default.Component);

TableHeader.propTypes = {
  columnsOrder: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
  config: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    column: _propTypes2.default.string.isRequired,
    title: _propTypes2.default.string.isRequired
  })).isRequired,
  i18n: _propTypes2.default.shape({
    allItemsSelected: _propTypes2.default.string.isRequired,
    allPageSelected: _propTypes2.default.string.isRequired,
    clearSelection: _propTypes2.default.string.isRequired,
    selectAllItems: _propTypes2.default.string.isRequired
  }),
  loading: _propTypes2.default.bool,
  numberOfPageItems: _propTypes2.default.number,
  onFilter: _propTypes2.default.func,
  onSelectAllItems: _propTypes2.default.func,
  onSelectAllPage: _propTypes2.default.func,
  onSort: _propTypes2.default.func,
  selectAllItems: _propTypes2.default.bool,
  selectAllPage: _propTypes2.default.bool,
  selectionColumn: _propTypes2.default.bool,
  showFilters: _propTypes2.default.bool,
  sortBy: _propTypes2.default.shape({
    column: _propTypes2.default.string.isRequired,
    type: _propTypes2.default.oneOf(['ASC', 'DESC']).isRequired
  }),
  totalItems: _propTypes2.default.number
};

TableHeader.defaultProps = {
  i18n: {
    allItemsSelected: 'All %{totalItems} items are selected.',
    allPageSelected: 'All %{numberOfPageItems} items on this page are selected.',
    clearSelection: 'Clear selection',
    selectAllItems: 'Select all %{totalItems} of the list'
  },
  loading: false,
  numberOfPageItems: 0,
  onFilter: function onFilter() {},
  onSelectAllItems: undefined,
  onSelectAllPage: function onSelectAllPage() {},
  onSort: undefined,
  selectAllItems: false,
  selectAllPage: false,
  selectionColumn: false,
  showFilters: false,
  sortBy: undefined,
  totalItems: 0
};

TableHeader.displayName = 'TableHeader';

exports.default = TableHeader;